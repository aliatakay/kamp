{\rtf1\ansi\ansicpg1254\deff0\nouicompat\deflang1055{\fonttbl{\f0\fnil\fcharset162 Calibri;}{\f1\fnil\fcharset0 Calibri;}{\f2\fnil\fcharset238 Calibri;}{\f3\fnil\fcharset162 Consolas;}{\f4\fnil\fcharset238 Consolas;}{\f5\fnil\fcharset0 Consolas;}{\f6\fnil Consolas;}}
{\colortbl ;\red155\green0\blue211;\red0\green77\blue187;\red255\green0\blue0;\red255\green255\blue0;\red0\green176\blue80;\red75\green172\blue198;\red0\green255\blue0;\red155\green187\blue89;\red0\green0\blue0;\red0\green0\blue255;}
{\*\generator Riched20 10.0.17763}\viewkind4\uc1 
\pard\sl276\slmult1\qc\cf1\f0\fs28 ------------------------------------------------------------------------------------------------\par
\fs48 5. G\f1\lang1033\'fc\f0\lang1055 n\f2\fs28\par

\pard\sl276\slmult1\qj\f0 ------------------------------------------------------------------------------------------------\par
\par
\par
\cf2\f1\fs36\lang1033\'d6\f0\lang1055 N B\f2\u304?\f0 LG\f2\u304?\f0\fs28    ------------------------------------------------------------------------------\cf0\par
Bu derste programlama dili olarak \cf3 C#\cf0  kullan\f2\u305?\f0 lacak.\par
IDE olarak \cf3 Visual Studio 2019\cf0  kullan\f2\u305?\f0 lacak.\f1\lang31\par
\cf2\f0\lang1055 ------------------------------------------------------------------------------------------------\par
\par
\par
\cf1\fs36 1. DERS\fs28    ---------------------------------------------------------------------------------\par
\par
KampIntro \cf0 isimli projemizde Solution'a sa\f2\u287?\f0  t\f2\u305?\f0 klayarak yeni bir console projesi olu\f2\'ba\f0 turuyoruz.\par
Projeyi \cf1 OOP2 \cf0 olarak isimlendirebiliriz.\par
\par
\cf1 Bu derste soyutlama tekniklerine giri\f2\'ba\f0  yapaca\f2\u287?\u305?\f0 z.\cf0\par
Soyutlama teknikleri OOP i\f1\lang1033\'e7\f0\lang1055 in en \f1\lang1033\'f6\f0\lang1055 nemli kavramd\f2\u305?\f0 r.\par
Bu derste ger\f1\lang1033\'e7\f0\lang1055 ek hayattan \f1\lang1033\'f6\f0\lang1055 rneklerle soyutlama tekniklerini \f1\lang1033\'f6\f2\lang1055\u287?\f0 renece\f2\u287?\f0 iz.\par
\par
Bir bankay\f2\u305?\f0  d\f1\lang1033\'fc\f2\lang1055\'ba\f1\lang1033\'fc\f0\lang1055 nelim.\par
Bir bankada 2 \f1\lang1033\'e7\f0\lang1055 e\f2\'ba\f0 it M\f1\lang1033\'fc\f2\lang1055\'ba\f0 teri vard\f2\u305?\f0 r.\par
Ger\f1\lang1033\'e7\f0\lang1055 ek ve T\f1\lang1033\'fc\f0\lang1055 zel m\f1\lang1033\'fc\f2\lang1055\'ba\f0 teriler olmak \f1\lang1033\'fc\f0\lang1055 zere ikiye ayr\f2\u305?\f0 l\f2\u305?\f0 r.\par
\f2\'aa\f0 imdi bir m\f1\lang1033\'fc\f2\lang1055\'ba\f0 teri y\f1\lang1033\'f6\f0\lang1055 netim sistemi \f1\lang1033\'f6\f0\lang1055 rne\f2\u287?\f0 inden ilerleyece\f2\u287?\f0 iz.\par
\par
\cf1 OOP2 \cf0 projemize sa\f2\u287?\f0  t\f2\u305?\f0 klayarak yeni bir class ekliyoruz.\par
Bu class'\f2\u305?\f0  \cf1 Customer.cs\cf0  olarak isimlendiriyoruz.\par
\par
Bildi\f2\u287?\f0 imiz \f1\lang1033\'fc\f0\lang1055 zere class'lar 2 temel ama\f1\lang1033\'e7\f0\lang1055  i\f1\lang1033\'e7\f0\lang1055 in kullan\f2\u305?\f0 l\f2\u305?\f0 r.\par
Bir class ya \f1\lang1033\'f6\f0\lang1055 zellikleri ya da operasyonlar\f2\u305?\f0  i\f1\lang1033\'e7\f0\lang1055 erir.\par
\f1\lang1033\'d6\f0\lang1055 zelliklerin tan\f2\u305?\f0 mland\f2\u305?\u287?\u305?\f0  class'ta operasyon olmaz.\par
Ayn\f2\u305?\f0  \f2\'ba\f0 ekilde operasyonlar\f2\u305?\f0 n oldu\f2\u287?\f0 u class'ta \f1\lang1033\'f6\f0\lang1055 zellikler bulunmaz.\f1\lang1033\par
\par
\cf2\f0\fs36\lang1055 KURAL  \fs28 -----------------------------------------------------------------------------------\cf0\par
\cf3 Class isimlendirmesi\cf0  yaparken mutlaka \cf3 tekil \cf0 isimlendirme kullan\f2\u305?\f0 l\f2\u305?\f0 r.\par
M\f1\lang1033\'fc\f2\lang1055\'ba\f0 teri \f1\lang1033\'f6\f0\lang1055 zelliklerini bar\f2\u305?\f0 nd\f2\u305?\f0 racak bir class'\f2\u305?\f0 n ismi Customer.cs tarz\f2\u305?\f0 nda tekil olarak isimlendirilir.\cf3\par
\cf2 ------------------------------------------------------------------------------------------------\par
\cf0\f1\lang1033\par
\cf1\f2\lang1055\'aa\f0 imdi inhertance konusunu i\f2\'ba\f0 leyece\f2\u287?\f0 iz.\cf0\par
\par
Fakat \f1\lang1033\'f6\f0\lang1055 ncelikle k\f1\lang1033\'f6\f0\lang1055 t\f1\lang1033\'fc\f0\lang1055  kod yazaca\f2\u287?\u305?\f0 z.\par
K\f1\lang1033\'f6\f0\lang1055 t\f1\lang1033\'fc\f0\lang1055  kodlaman\f2\u305?\f0 n zararlar\f2\u305?\f0 n\f2\u305?\f0  g\f1\lang1033\'f6\f0\lang1055 rd\f1\lang1033\'fc\f0\lang1055 kten sonra, do\f2\u287?\f0 ru kodu yazaca\f2\u287?\u305?\f0 z.\par
\par
\cf1 Customer.cs\cf0  class'\f2\u305?\f0 nda gerekli m\f1\lang1033\'fc\f2\lang1055\'ba\f0 teri \f1\lang1033\'f6\f0\lang1055 zelliklerini tan\f2\u305?\f0 mlayal\f2\u305?\f0 m.\par
\par
\cf2\highlight4\f3\fs24  class \cf5 Customer                                                \cf2\par
\cf0  \{                                                             \cf2\par
     public int \cf0 Id \{\cf2  get\cf0 ; \cf2 set\cf0 ; \}                               \par
\cf2      public string \cf0 CustomerNo \{ \cf2 get\cf0 ; \cf2 set\cf0 ; \}                    \cf2\par
     public string \cf0 FirstName \{ \cf2 get\cf0 ; \cf2 set\cf0 ; \}                     \par
\cf2      public string \cf0 LastName \{ \cf2 get\cf0 ; \cf2 set\cf0 ; \}                      \cf2\par
     public string \cf0 CompanyName \{ \cf2 get\cf0 ; \cf2 set\cf0 ; \}                   \par
     \cf2 public string \cf0 IdentityNumber \{ \cf2 get\cf0 ; \cf2 set\cf0 ; \}                \par
     \cf2 public string \cf0 TaxNumber \{ \cf2 get\cf0 ; \cf2 set\cf0 ; \}                     \cf2\par
\cf0  \}                                                             \highlight0\f0\fs28\par
\f1\lang1033\par
\cf2\f0\fs36\lang1055 NOT\fs28    --------------------------------------------------------------------------------------\cf0\par
Vergi numaras\f2\u305?\f0 , Kimlik numaras\f2\u305?\f0  gibi \f1\lang1033\'f6\f0\lang1055 zellikleri string olarak tan\f2\u305?\f0 mlad\f2\u305?\f0 k.\par
\f1\lang1033\'c7\'fc\f0\lang1055 nk\f1\lang1033\'fc\f0\lang1055  bir \f1\lang1033\'f6\f0\lang1055 zellik \f1\lang1033\'fc\f0\lang1055 zerinde say\f2\u305?\f0 sal i\f2\'ba\f0 lemler ger\f1\lang1033\'e7\f0\lang1055 ekle\f2\'ba\f0 tirilmeyecekse, o halde string olarak saklan\f2\u305?\f0 r.\par
Sonu\f1\lang1033\'e7\f0\lang1055 ta kimlik numaras\f2\u305?\f0  her zaman sabittir ve asla de\f2\u287?\f0 i\f2\'ba\f0 mez.\par
Bu nedenden dolay\f2\u305?\f0  bu tip \f1\lang1033\'f6\f0\lang1055 zellikleri string olarak saklar\f2\u305?\f0 z.\par
\par
Ayn\f2\u305?\f0  zamanda say\f2\u305?\f0 sal veriler farkl\f2\u305?\f0  ortamlara aktar\f2\u305?\f0 l\f2\u305?\f0 rken bozulmalar ya\f2\'ba\f0 anabilir. O sebepten dolay\f2\u305?\f0  en iyi y\f1\lang1033\'f6\f0\lang1055 ntem string olarak saklamakt\f2\u305?\f0 r.\cf3\par
\cf2 ------------------------------------------------------------------------------------------------\par
\cf0\f1\lang1033\par
\cf2\f0\fs36\lang1055 NOT\fs28    --------------------------------------------------------------------------------------\cf0\par
Bir nesneye ait \f1\lang1033\'f6\f0\lang1055 zellikleri tan\f2\u305?\f0 mlarken, \f1\lang1033\'f6\f0\lang1055 zelliklerin tamam\f2\u305?\f0  doldurulmas\f2\u305?\f0  \cf3 zorunlu alanlar olarak durmuyorsa\cf0 , o halde \cf3 soyutlama hatas\f2\u305?\f0  yap\f2\u305?\f0 yoruz\cf0  demektir.\cf3\par
\cf2 ------------------------------------------------------------------------------------------------\par
\cf0\par
\f2\'aa\f0 imdi \cf1 Program.cs\cf0  dosyas\f2\u305?\f0 n\f2\u305?\f0  a\f1\lang1033\'e7\f0\lang1055 al\f2\u305?\f0 m.\par
Burada bir Customer instance'\f2\u305?\f0  olu\f2\'ba\f0 tural\f2\u305?\f0 m.\par
Ve \cf1\f2\'aa\f0 ah\f2\u305?\f0 s M\f1\lang1033\'fc\f2\lang1055\'ba\f0 teri\cf0  olarak, \f1\lang1033\'f6\f0\lang1055 zellikleri doldurmaya \f1\lang1033\'e7\f0\lang1055 al\f2\u305?\'ba\f0 al\f2\u305?\f0 m.\par
\par
\cf2\highlight4\f3\fs24  static void \cf0 Main(\cf2 string\cf0 [] \cf6 args\cf0 )                               \cf2\par
\cf0  \{                                                             \cf2\par
     \cf5 Customer \cf6 customer \cf0 =\cf2  new \cf5 Customer\cf0 ();\cf2                        \cf0\highlight0\f0\fs28\par
\highlight4\f3\fs24      \cf6 customer\cf0 .Id = \cf3 1\cf0 ;                                          \highlight0\f0\fs28\par
\highlight4\f3\fs24      \cf6 customer\cf0 .FirstName = "\cf3 Ali\cf0 ";                               \highlight0\f0\fs28\par
\highlight4\f3\fs24      \cf6 customer\cf0 .LastName = \cf3 "Atakay"\cf0 ;                             \par
     \cf6 customer\cf0 .IdentityNumber = "\cf3 10090020043\cf0 ";                  \par
     \cf6 customer\cf0 .CustomerNo = "\cf3 3312123\cf0 ";                          \par
\highlight7      \cf6 customer\cf0 .CompanyName = "";                                \par
\highlight4  \}                                                             \highlight0\f0\fs28\par
\par
Dikkat edildi\f2\u287?\f0 i \f1\lang1033\'fc\f0\lang1055 zere, yukar\f2\u305?\f0 da \f2\'ba\f0 ah\f2\u305?\f0 s t\f1\lang1033\'fc\f0\lang1055 r\f1\lang1033\'fc\f0\lang1055 nde bir m\f1\lang1033\'fc\f2\lang1055\'ba\f0 teri tan\f2\u305?\f0 mlamaya \f1\lang1033\'e7\f0\lang1055 al\f2\u305?\'ba\f0 t\f2\u305?\f0 k.\par
Fakat ye\f2\'ba\f0 il sat\f2\u305?\f0 rda g\f1\lang1033\'f6\f0\lang1055 r\f1\lang1033\'fc\f0\lang1055 len yerde, bizden \f2\'aa\f0 irket Ad\f2\u305?\f0  istedi.\par
\cf3 Fakat \f2\'ba\f0 ah\f2\u305?\f0 s olarak, \f2\'ba\f0 irket ismi bizim i\f1\lang1033\'e7\f0\lang1055 in tamamen alakas\f2\u305?\f0 z bir \f1\lang1033\'f6\f0\lang1055 zelliktir.\cf0\par
\cf2\f2\u304?\'ba\f0 te bu y\f1\lang1033\'fc\f0\lang1055 zden Customer class tan\f2\u305?\f0 mlamas\f2\u305?\f0  tamamen hatal\f2\u305?\f0 d\f2\u305?\f0 r.\cf1\par
\cf3 Ger\f1\lang1033\'e7\f0\lang1055 ek M\f1\lang1033\'fc\f2\lang1055\'ba\f0 teri\cf2  ve \cf3 T\f1\lang1033\'fc\f0\lang1055 zel M\f1\lang1033\'fc\f2\lang1055\'ba\f0 teri\cf2  nesneleri, birbirine benziyor diye, ayn\f2\u305?\f0  class i\f1\lang1033\'e7\f0\lang1055 inde \cf3 ortak olarak TANIMLANAMAZ\cf2 .\par
\cf0 Bu kullan\f2\u305?\f0 m SOLID prensiplerinin L kural\f2\u305?\f0 na ayk\f2\u305?\f0 r\f2\u305?\f0 d\f2\u305?\f0 r.\par
\par
\f2\u304?\'ba\f0 te bu t\f1\lang1033\'fc\f0\lang1055 r hatal\f2\u305?\f0  class tan\f2\u305?\f0 mlamas\f2\u305?\f0  yerine, farkl\f2\u305?\f0  class'lar olu\f2\'ba\f0 turmal\f2\u305?\f0 y\f2\u305?\f0 z.\par
\par
\cf1 OOP2 \cf0 projemize sa\f2\u287?\f0  t\f2\u305?\f0 klayarak yeni bir class ekliyoruz.\par
Bu class'\f2\u305?\f0  \cf1 IndividualCustomer.cs\cf0  olarak isimlendiriyoruz.\par
Bireysel M\f1\lang1033\'fc\f2\lang1055\'ba\f0 teri anlam\f2\u305?\f0 ndad\f2\u305?\f0 r.\par
\par
\cf1 OOP2 \cf0 projemize sa\f2\u287?\f0  t\f2\u305?\f0 klayarak yeni bir class ekliyoruz.\par
Bu class'\f2\u305?\f0  \cf1 CorporateCustomer.cs\cf0  olarak isimlendiriyoruz.\par
T\f1\lang1033\'fc\f0\lang1055 zel M\f1\lang1033\'fc\f2\lang1055\'ba\f0 teri anlam\f2\u305?\f0 ndad\f2\u305?\f0 r.\par
\par
\f2\'aa\f0 imdi Ger\f1\lang1033\'e7\f0\lang1055 ek M\f1\lang1033\'fc\f2\lang1055\'ba\f0 terinin \f1\lang1033\'f6\f0\lang1055 zelliklerini olu\f2\'ba\f0 tural\f2\u305?\f0 m.\par
\cf1 IndividualCustomer class'\f2\u305?\f0 na gidelim.\cf0\par
\par
\cf2\highlight4\f3\fs24  class \cf5 IndividualCustomer                                      \cf2\par
\cf0  \{                                                             \cf2\par
     public int \cf0 Id \{\cf2  get\cf0 ; \cf2 set\cf0 ; \}                               \par
\cf2      public string \cf0 CustomerNo \{ \cf2 get\cf0 ; \cf2 set\cf0 ; \}                    \par
     \cf2 public string \cf0 IdentityNumber \{ \cf2 get\cf0 ; \cf2 set\cf0 ; \}                \cf2\par
     public string \cf0 FirstName \{ \cf2 get\cf0 ; \cf2 set\cf0 ; \}                     \par
\cf2      public string \cf0 LastName \{ \cf2 get\cf0 ; \cf2 set\cf0 ; \}                      \cf2\par
\cf0  \}                                                             \highlight0\f0\fs28\par
\par
\f2\'aa\f0 imdi T\f1\lang1033\'fc\f0\lang1055 zel M\f1\lang1033\'fc\f2\lang1055\'ba\f0 terinin \f1\lang1033\'f6\f0\lang1055 zelliklerini olu\f2\'ba\f0 tural\f2\u305?\f0 m.\par
\cf1 CorporateCustomer class'\f2\u305?\f0 na gidelim.\cf0\par
\par
\cf2\highlight4\f3\fs24  class \cf5 CorporateCustomer                                       \cf2\par
\cf0  \{                                                             \cf2\par
     public int \cf0 Id \{\cf2  get\cf0 ; \cf2 set\cf0 ; \}                               \par
\cf2      public string \cf0 CustomerNo \{ \cf2 get\cf0 ; \cf2 set\cf0 ; \}                    \par
\cf2      public string \cf0 CompanyName \{ \cf2 get\cf0 ; \cf2 set\cf0 ; \}                   \par
     \cf2 public string \cf0 TaxNumber \{ \cf2 get\cf0 ; \cf2 set\cf0 ; \}                     \par
 \}                                                             \highlight0\f0\fs28\par
\par
\f2\'aa\f0 imdi M\f1\lang1033\'fc\f2\lang1055\'ba\f0 terileri veritaban\f2\u305?\f0 na ekleyecek olan bir operasyon yazal\f2\u305?\f0 m.\par
Bu t\f1\lang1033\'fc\f0\lang1055 r operasyonlar\f2\u305?\f0  kesinlikle, entity class'lar\f2\u305?\f0 n\f2\u305?\f0 n i\f1\lang1033\'e7\f0\lang1055 ine yazmamal\f2\u305?\f0 y\f2\u305?\f0 z.\par
\par
\cf1 OOP2 \cf0 projemize sa\f2\u287?\f0  t\f2\u305?\f0 klayarak yeni bir class ekliyoruz.\par
Bu class'\f2\u305?\f0  \cf1 CustomerManager.cs\cf0  olarak isimlendiriyoruz.\par
\par
\cf2\highlight4\f3\fs24  class \cf5 CustomerManager                                         \cf2\par
\cf0  \{                                                             \cf2\par
\cf0      \cf2 public void \cf0 Add(\cf5 Customer \cf6 customer\cf0 )                        \par
     \{                                                         \par
         \cf5 Console\cf0 .Write(\cf6 customer\cf0 .Id + \cf3 " eklendi"\cf0 );              \par
     \}                                                         \cf2\par
\cf0  \}                                                             \highlight0\f0\fs28\par
\par
Biz yukar\f2\u305?\f0 daki \f2\'ba\f0 ekilde \cf3 Customer tipinde \cf0 olan her veriyi, ayn\f2\u305?\f0   \cf3 Add metodu \cf0 ile eklemek istedi\f2\u287?\f0 imizi d\f1\lang1033\'fc\f2\lang1055\'ba\f1\lang1033\'fc\f0\lang1055 nelim.\par
Yani \cf3 hem Individual hem de Corporate tipte m\f1\lang1033\'fc\f2\lang1055\'ba\f0 terileri\cf0  ayn\f2\u305?\f0  Add metodu ile eklemek istedi\f2\u287?\f0 imizi d\f1\lang1033\'fc\f2\lang1055\'ba\f1\lang1033\'fc\f0\lang1055 nelim.\par
\f2\u304?\'ba\f0 te bu durumda, parametre olarak Customer tipinde bir tip ge\f1\lang1033\'e7\f0\lang1055 iyoruz.\par
\cf2\f1\lang1033\'c7\'fc\f0\lang1055 nk\f1\lang1033\'fc\f0\lang1055  bu Customer tipi, hem Ger\f1\lang1033\'e7\f0\lang1055 ek hem T\f1\lang1033\'fc\f0\lang1055 zel Customer'lar\f2\u305?\f0  ifade edecek.\par
\cf1 Bu olay\f2\u305?\f0  yapmak i\f1\lang1033\'e7\f0\lang1055 ine \cf3 INHERITANCE \cf1 (Miras) \f1\lang1033\'f6\f0\lang1055 zelli\f2\u287?\f0 ini kullanmam\f2\u305?\f0 z gerekiyor.\par
\par
Hem CorporateCustomer hem IndividualCustomer s\f2\u305?\f0 n\f2\u305?\f0 flar\f2\u305?\f0  i\f1\lang1033\'e7\f0\lang1055 in a\f2\'ba\f0 a\f2\u287?\u305?\f0 daki inheritance kullan\f2\u305?\f0 m\f2\u305?\f0 n\f2\u305?\f0  ekliyoruz.\par
\par
\cf2\highlight4\f3\fs24  class \cf5 CorporateCustomer : Customer                            \cf2\par
\cf0  \{                                                             \cf2\par
     public int \cf0 Id \{\cf2  get\cf0 ; \cf2 set\cf0 ; \}                               \par
\cf2      public string \cf0 CustomerNo \{ \cf2 get\cf0 ; \cf2 set\cf0 ; \}                    \par
\cf2      public string \cf0 CompanyName \{ \cf2 get\cf0 ; \cf2 set\cf0 ; \}                   \par
     \cf2 public string \cf0 TaxNumber \{ \cf2 get\cf0 ; \cf2 set\cf0 ; \}                     \par
 \}                                                             \highlight0\f0\fs28\par
\cf1\par
\cf0 T\f1\lang1033\'fc\f0\lang1055 zel M\f1\lang1033\'fc\f2\lang1055\'ba\f0 teri bir M\f1\lang1033\'fc\f2\lang1055\'ba\f0 teridir.\par
Ger\f1\lang1033\'e7\f0\lang1055 ek M\f1\lang1033\'fc\f2\lang1055\'ba\f0 teri bir M\f1\lang1033\'fc\f2\lang1055\'ba\f0 teridir.\par
Bu mant\f2\u305?\f0 ktan dolay\f2\u305?\f0  2 m\f1\lang1033\'fc\f2\lang1055\'ba\f0 teri s\f2\u305?\f0 n\f2\u305?\f0 f\f2\u305?\f0  da Customer s\f2\u305?\f0 n\f2\u305?\f0 f\f2\u305?\f0 ndan miras ald\f2\u305?\f0 .\par
\par
\cf1 Inheritance kavram\f2\u305?\f0 n\f2\u305?\f0 n as\f2\u305?\f0 l olay\f2\u305?\f0 n\f2\u305?\f0  \f1\lang1033\'f6\f2\lang1055\u287?\f0 renelim.\par
\par
\cf0 Normalde inheritance \f2\'ba\f1\lang1033\'f6\f0\lang1055 yle anlat\f2\u305?\f0 l\f2\u305?\f0 r; Customer class'\f2\u305?\f0 ndaki \f1\lang1033\'f6\f0\lang1055 zellikler IndividualCustomer class'\f2\u305?\f0 nda da kullan\f2\u305?\f0 lacakt\f2\u305?\f0 r.\par
Evet bu bilgi tamamen do\f2\u287?\f0 rudur ama \cf3 EKS\f2\u304?\f0 KT\f2\u304?\f0 R.\par
Asl\f2\u305?\f0 nda inheritance \f1\lang1033\'e7\f0\lang1055 ok daha \f1\lang1033\'f6\f0\lang1055 nemli bir amaca hizmet eder. \par
\cf0 Buna birazdan gelece\f2\u287?\f0 iz. \f1\lang1033\'d6\f0\lang1055 nce \f1\lang1033\'f6\f0\lang1055 rnekteki kodlamay\f2\u305?\f0  tamamlayal\f2\u305?\f0 m.\cf3\par
\par
\cf0 Customer s\f2\u305?\f0 n\f2\u305?\f0 f\f2\u305?\f0 n\f2\u305?\f0  ebeveyn s\f2\u305?\f0 n\f2\u305?\f0 f olarak kullan\f2\u305?\f0 yoruz.\par
O halde hem ger\f1\lang1033\'e7\f0\lang1055 ek hem t\f1\lang1033\'fc\f0\lang1055 zel s\f2\u305?\f0 n\f2\u305?\f0 f\f2\u305?\f0 nda olan ortak \f1\lang1033\'f6\f0\lang1055 zellikleri Customer s\f2\u305?\f0 n\f2\u305?\f0 f\f2\u305?\f0 nda tan\f2\u305?\f0 mlayabiliriz. \par
Nas\f2\u305?\f0 l olsa Customer s\f2\u305?\f0 n\f2\u305?\f0 f\f2\u305?\f0 ndaki \f1\lang1033\'f6\f0\lang1055 zellikler kendisini inherit eden s\f2\u305?\f0 n\f2\u305?\f0 flara da ta\f2\'ba\u305?\f0 nacakt\f2\u305?\f0 r.\par
\par
Ortak \f1\lang1033\'f6\f0\lang1055 zellikleri Customer s\f2\u305?\f0 n\f2\u305?\f0 f\f2\u305?\f0 na ta\f2\'ba\u305?\f0 yal\f2\u305?\f0 m.\par
\cf3\par
\cf2\highlight4\f3\fs24  class \cf5 Customer                                                \cf2\par
\cf0  \{                                                             \cf2\par
     public int \cf0 Id \{\cf2  get\cf0 ; \cf2 set\cf0 ; \}                               \par
\cf2      public string \cf0 CustomerNo \{ \cf2 get\cf0 ; \cf2 set\cf0 ; \}                    \par
 \}                                                             \highlight0\f0\fs28\par
\cf3\par
\cf0 Ta\f2\'ba\u305?\f0 d\f2\u305?\u287?\u305?\f0 m\f2\u305?\f0 z bu 2 \f1\lang1033\'f6\f0\lang1055 zelli\f2\u287?\f0 i di\f2\u287?\f0 er s\f2\u305?\f0 n\f2\u305?\f0 flardan siliyoruz elbette.\par
\par
Art\f2\u305?\f0 k 2 m\f1\lang1033\'fc\f2\lang1055\'ba\f0 teriden ayr\f2\u305?\f0  ayr\f2\u305?\f0  instance \f1\lang1033\'fc\f0\lang1055 retebiliriz.\par
\cf1 Program.cs dosyas\f2\u305?\f0 n\f2\u305?\f0  a\f1\lang1033\'e7\f0\lang1055 al\f2\u305?\f0 m.\par
\par
\cf2\highlight4\f3\fs24  static void \cf0 Main(\cf2 string\cf0 [] \cf6 args\cf0 )                               \cf2\par
\cf0  \{                                                             \cf2\par
     \cf5 IndividualCustomer \cf6 customer1 \cf0 =\cf2  new \cf5 IndividualCustomer\cf0 ();\cf2   \cf0\highlight0\f0\fs28\par
\highlight4\f3\fs24      \cf6 customer1\cf0 .Id = \cf3 1\cf0 ;                                         \highlight0\f0\fs28\par
\highlight4\f3\fs24      \cf6 customer1\cf0 .FirstName = "\cf3 Ali\cf0 ";                              \highlight0\f0\fs28\par
\highlight4\f3\fs24      \cf6 customer1\cf0 .LastName = \cf3 "Atakay"\cf0 ;                            \par
     \cf6 customer1\cf0 .IdentityNumber = "\cf3 10090020043\cf0 ";                 \par
     \cf6 customer1\cf0 .CustomerNo = "\cf3 3312123\cf0 ";                         \par
                                                               \par
\cf2      \cf5 CorporateCustomer \cf6 customer2 \cf0 =\cf2  new \cf5 CorporateCustomer\cf0 ();\cf2     \cf0\highlight0\f0\fs28\par
\highlight4\f3\fs24      \cf6 customer2\cf0 .Id = \cf3 1\cf0 ;                                         \highlight0\f0\fs28\par
\highlight4\f3\fs24      \cf6 customer2\cf0 .CompanyName = "\cf3 Company\cf0 ";                        \highlight0\f0\fs28\par
\highlight4\f3\fs24      \cf6 customer2\cf0 .TaxNumber = \cf3 "121433"\cf0 ;                           \par
     \cf6 customer2\cf0 .CustomerNo = "\cf3 3312123\cf0 ";                         \par
 \}                                                             \highlight0\f0\fs28\par
\par
G\f1\lang1033\'f6\f0\lang1055 r\f1\lang1033\'fc\f0\lang1055 ld\f1\lang1033\'fc\f2\lang1055\u287?\f1\lang1033\'fc\f0\lang1055  gibi, Ger\f1\lang1033\'e7\f0\lang1055 ek M\f1\lang1033\'fc\f2\lang1055\'ba\f0 teri i\f1\lang1033\'e7\f0\lang1055 in gereksiz denecek hi\f1\lang1033\'e7\f0\lang1055 bir \f1\lang1033\'f6\f0\lang1055 zellik yok.\par
T\f1\lang1033\'fc\f0\lang1055 zel M\f1\lang1033\'fc\f2\lang1055\'ba\f0 teri i\f1\lang1033\'e7\f0\lang1055 in de gereksiz hi\f1\lang1033\'e7\f0\lang1055 bir alan bulunmamaktad\f2\u305?\f0 r.\par
Bu sayede olu\f2\'ba\f0 abilecek hatal\f2\u305?\f0  giri\f2\'ba\f0 leri minimize etmi\f2\'ba\f0  olduk.\par
\par
Fakat gelelim as\f2\u305?\f0 l meseleye.\par
Inheritance olay\f2\u305?\f0 n\f2\u305?\f0 n bize sa\f2\u287?\f0 lad\f2\u305?\u287?\u305?\f0  en \f1\lang1033\'f6\f0\lang1055 nemli \f1\lang1033\'f6\f0\lang1055 zellik ba\f2\'ba\f0 ka bir \f2\'ba\f0 ey.\par
\cf3 Bu \f1\lang1033\'f6\f0\lang1055 zellik soyutlama mant\f2\u305?\u287?\u305?\f0 n\f2\u305?\f0 n en b\f1\lang1033\'fc\f0\lang1055 y\f1\lang1033\'fc\f0\lang1055 k olaylar\f2\u305?\f0 ndan birisidir.\par
\par
Inheritance sayesinde,\par
EBEVEYN T\f2\u304?\f0 P\f2\u304?\f0 , \f1\lang1033\'c7\f0\lang1055 OCUK CLASS'LARIN T\f2\u304?\f0 P\f2\u304?\f0 NDE NESNELER\f2\u304?\f0 N REFERANSINI TUTAB\f2\u304?\f0 L\f2\u304?\f0 R.\par
\par
\cf2\highlight4\f3\fs24  static void \cf0 Main(\cf2 string\cf0 [] \cf6 args\cf0 )                               \cf2\par
\cf0  \{                                                             \cf2\par
     \cf5 IndividualCustomer \cf6 customer1 \cf0 =\cf2  new \cf5 IndividualCustomer\cf0 ();\cf2  \cf0  \par
\cf2      \cf5 CorporateCustomer \cf6 customer2 \cf0 =\cf2  new \cf5 CorporateCustomer\cf0 ();\cf2     \par
                                                               \par
\fs28     \cf5 Customer \cf6 customer3 \cf0 =\cf2  new \cf5 IndividualCustomer\cf0 ();\cf2  \cf0    \par
\cf2     \cf5 Customer \cf6 customer4 \cf0 =\cf2  new \cf5 CorporateCustomer\cf0 ();\cf2      \cf0\highlight0\f0\par
\highlight4\f3\fs24  \}                                                             \highlight0\f0\fs28\par
\par
\f2\u304?\'ba\f0 te inheritance'\f2\u305?\f0 n bize sa\f2\u287?\f0 lad\f2\u305?\u287?\u305?\f0  en b\f1\lang1033\'fc\f0\lang1055 y\f1\lang1033\'fc\f0\lang1055 k avantaj budur.\par
Kendisini miras alan t\f1\lang1033\'fc\f0\lang1055 m s\f2\u305?\f0 n\f2\u305?\f0 flar\f2\u305?\f0 n referans\f2\u305?\f0 n\f2\u305?\f0  tutabilir.\par
\par
Ve yine bu sayede ebeveyn tipte parametre i\f1\lang1033\'e7\f0\lang1055 eren Add metodunu, her 2 \f1\lang1033\'e7\f0\lang1055 ocuk nesne i\f1\lang1033\'e7\f0\lang1055 in de kullanabilece\f2\u287?\f0 iz.\par
\par
\cf2\highlight4\f3\fs24  static void \cf0 Main(\cf2 string\cf0 [] \cf6 args\cf0 )                               \cf2\par
\cf0  \{                                                             \cf2\par
     \cf5 Customer \cf6 customer1 \cf0 =\cf2  new \cf5 IndividualCustomer\cf0 ();\cf2  \cf0            \par
\cf2      \cf5 Customer \cf6 customer2 \cf0 =\cf2  new \cf5 CorporateCustomer\cf0 ();\cf2              \par
                                                               \par
     \cf5 CustomerManager \cf6 customerManager \cf0 =\cf2  new \cf5 CustomerManager\cf2 ();  \par
     \cf6 customerManager\cf0 .Add(\cf6 customer1\cf0 );                           \cf2\par
     \cf6 customerManager\cf0 .Add(\cf6 customer2\cf0 );                           \cf2\par
\cf0  \}                                                             \highlight0\f0\fs28\par
\cf1\par
\fs36 2. DERS\fs28    ---------------------------------------------------------------------------------\par
\cf0\par
CustomerManager s\f2\u305?\f0 n\f2\u305?\f0 f\f2\u305?\f0 nda Add metoduna, Customer tipinde parametre verebiliyor olmam\f2\u305?\f0 z bir \cf3 Polymorphism\cf0  \f1\lang1033\'f6\f0\lang1055 rne\f2\u287?\f0 idir.\par
\f1\lang1033\'c7\'fc\f0\lang1055 nk\f1\lang1033\'fc\f0\lang1055  Customer tipinde parametre sayesinde hem Ger\f1\lang1033\'e7\f0\lang1055 ek hem T\f1\lang1033\'fc\f0\lang1055 zel m\f1\lang1033\'fc\f2\lang1055\'ba\f0 teriyi tutabiliriz.\par
\par
\f1\lang1033\'d6\f0\lang1055 zet olarak OOP2 projesinde \f1\lang1033\'f6\f2\lang1055\u287?\f0 rendi\f2\u287?\f0 imiz \f2\'ba\f0 ey, \cf3 bir Base s\f2\u305?\f0 n\f2\u305?\f0 f referans tutucu olarak i\f2\'ba\f0 lev g\f1\lang1033\'f6\f0\lang1055 r\f1\lang1033\'fc\f0\lang1055 r\cf0 .\par
\par
\cf1 KampIntro \cf0 isimli projemizde Solution'a sa\f2\u287?\f0  t\f2\u305?\f0 klayarak yeni bir console projesi olu\f2\'ba\f0 turuyoruz.\par
Projeyi \cf1 OOP3 \cf0 olarak isimlendirebiliriz.\par
\par
\cf1\f2\'aa\f0 imdi interface konusunu \f1\lang1033\'f6\f2\lang1055\u287?\f0 renece\f2\u287?\f0 iz.\par
\par
\cf0 Yine bir banka uygulumas\f2\u305?\f0 n\f2\u305?\f0  d\f1\lang1033\'fc\f2\lang1055\'ba\f1\lang1033\'fc\f0\lang1055 nelim.\cf1\par
\cf0 Her kredi \f1\lang1033\'e7\f0\lang1055 e\f2\'ba\f0 idinin belli bir geri \f1\lang1033\'f6\f0\lang1055 deme plan\f2\u305?\f0  vard\f2\u305?\f0 r.\par
\f1\lang1033\'d6\f0\lang1055 rne\f2\u287?\f0 in konut kredisi al\f2\u305?\f0 rsan, 3 y\f2\u305?\f0 lda X miktar para \f1\lang1033\'f6\f0\lang1055 demek zorundas\f2\u305?\f0 n.\par
Ta\f2\'ba\u305?\f0 t kredisi al\f2\u305?\f0 rsan, 2 y\f2\u305?\f0 lda Y miktar para \f1\lang1033\'f6\f0\lang1055 demek zorundas\f2\u305?\f0 n gibi...\par
\par
\f2\'aa\f0 imdi bu \f1\lang1033\'f6\f0\lang1055 rne\f2\u287?\f0 i olu\f2\'ba\f0 tural\f2\u305?\f0 m.\par
\par
\cf1 OOP3 \cf0 projemize sa\f2\u287?\f0  t\f2\u305?\f0 klayarak yeni bir class ekliyoruz.\par
Bu class'\f2\u305?\f0  \cf1 KrediManager.cs\cf0  olarak isimlendiriyoruz.\par
\par
Bu Manager s\f2\u305?\f0 n\f2\u305?\f0 f\f2\u305?\f0 nda operasyonlar\f2\u305?\f0 n yer ald\f2\u305?\u287?\u305?\f0 n\f2\u305?\f0  d\f1\lang1033\'fc\f2\lang1055\'ba\f1\lang1033\'fc\f0\lang1055 nelim.\par
\par
\cf2\highlight4\f3\fs24  class \cf5 KrediManager                                            \cf2\par
\cf0  \{                                                             \cf2\par
\cf0      \cf2 public void \cf0 Hesapla()                                     \par
     \{                                                         \par
          \cf1 if\cf0 (konut kredisi ise) ...                            \par
          \cf1 if\cf0 (ta\f4\'ba\u305?\f3 t kredisi ise) ...                            \par
          \cf1 if\cf0 (\f5\lang1033\'e7\f3\lang1055 ift\f5\lang1033\'e7\f3\lang1055 i kredisi ise) ...                           \par
     \}                                                         \cf2\par
\cf0  \}                                                             \highlight0\f0\fs28\par
\par
Bu tarz bir hesapla metodunda, t\f1\lang1033\'fc\f0\lang1055 m kredi \f1\lang1033\'e7\f0\lang1055 e\f2\'ba\f0 itleri i\f1\lang1033\'e7\f0\lang1055 in geri \f1\lang1033\'f6\f0\lang1055 deme plan\f2\u305?\f0  hesaplayan kodu yazmak istiyoruz.\par
Yukar\f2\u305?\f0 daki yakla\f2\'ba\u305?\f0 m \f1\lang1033\'e7\f0\lang1055 ok ilkel olurdu. \par
Y\f1\lang1033\'fc\f0\lang1055 zlerce kredi \f1\lang1033\'e7\f0\lang1055 e\f2\'ba\f0 idi olabilir. Hepsini tek bir metot i\f1\lang1033\'e7\f0\lang1055 inde y\f1\lang1033\'f6\f0\lang1055 netmeye \f1\lang1033\'e7\f0\lang1055 al\f2\u305?\'ba\f0 sayd\f2\u305?\f0 k, Hesapla metodunun i\f1\lang1033\'e7\f0\lang1055 i \f1\lang1033\'e7\f0\lang1055 ok karma\f2\'ba\u305?\f0 k bir hal al\f2\u305?\f0 rd\f2\u305?\f0 .\par
\par
\f2\u304?\'ba\f0 te bu karma\f2\'ba\f0 a engel olmak ve temiz kod yazmak i\f1\lang1033\'e7\f0\lang1055 in, kredi manager s\f2\u305?\f0 n\f2\u305?\f0 flar\f2\u305?\f0 n\f2\u305?\f0  birbirinden ay\f2\u305?\f0 rmam\f2\u305?\f0 z gerekmektedir.\par
\par
\f2\u304?\f0 lk olarak t\f1\lang1033\'fc\f0\lang1055 m kredi manager s\f2\u305?\f0 n\f2\u305?\f0 flar\f2\u305?\f0 n\f2\u305?\f0 n atas\f2\u305?\f0  olacak bir Manager s\f2\u305?\f0 n\f2\u305?\f0 f\f2\u305?\f0  tan\f2\u305?\f0 mlamam\f2\u305?\f0 z gerekiyor.\par
Zaten KrediManager ad\f2\u305?\f0 nda bir s\f2\u305?\f0 n\f2\u305?\f0 f tan\f2\u305?\f0 mlam\f2\u305?\'ba\f0 t\f2\u305?\f0 k.\par
\f2\u304?\'ba\f0 te bu s\f2\u305?\f0 n\f2\u305?\f0 f bizim ebeveyn s\f2\u305?\f0 n\f2\u305?\f0 f\f2\u305?\f0 m\f2\u305?\f0 z olacak.\par
\par
\cf2\highlight4\f3\fs24  class \cf5 KrediManager                                            \cf2\par
\cf0  \{                                                             \cf2\par
\cf0      \cf2 public void \cf0 Hesapla()                                     \par
     \{                                                         \par
     \}                                                         \cf2\par
\cf0  \}                                                             \highlight0\f0\fs28\par
\par
\f2\'aa\f0 imdi t\f1\lang1033\'fc\f0\lang1055 m kredilere ayr\f2\u305?\f0  ayr\f2\u305?\f0  Manager s\f2\u305?\f0 n\f2\u305?\f0 flar\f2\u305?\f0  olu\f2\'ba\f0 turabiliriz.\par
\par
\cf1 OOP3 \cf0 projemize sa\f2\u287?\f0  t\f2\u305?\f0 klayarak yeni bir class ekliyoruz.\par
Bu class'\f2\u305?\f0  \cf1 KonutKrediManager.cs\cf0  olarak isimlendiriyoruz.\par
\par
\cf1 OOP3 \cf0 projemize sa\f2\u287?\f0  t\f2\u305?\f0 klayarak yeni bir class ekliyoruz.\par
Bu class'\f2\u305?\f0  \cf1 EmlakKrediManager.cs\cf0  olarak isimlendiriyoruz.\par
\par
\cf1 OOP3 \cf0 projemize sa\f2\u287?\f0  t\f2\u305?\f0 klayarak yeni bir class ekliyoruz.\par
Bu class'\f2\u305?\f0  \cf1 IhtiyacKrediManager.cs\cf0  olarak isimlendiriyoruz.\par
\cf2\par
Bu 3 s\f2\u305?\f0 n\f2\u305?\f0 f da KrediManager s\f2\u305?\f0 n\f2\u305?\f0 f\f2\u305?\f0 ndan inherit almal\f2\u305?\f0 .\par
\cf0\par
\cf2\highlight4\f3\fs24  class \cf5 KonutKrediManager \cf0 :\cf5  KrediManager                        \cf2\par
\cf0  \{                                                             \cf2\par
\cf0  \}                                                             \highlight0\f0\fs28\par
\par
\cf2\highlight4\f3\fs24  class \cf5 EmlakKrediManager \cf0 :\cf5  KrediManager                        \cf2\par
\cf0  \{                                                             \cf2\par
\cf0  \}                                                             \highlight0\f0\fs28\par
\par
\cf2\highlight4\f3\fs24  class \cf5 IhtiyacKrediManager \cf0 :\cf5  KrediManager                      \cf2\par
\cf0  \{                                                             \cf2\par
\cf0  \}                                                             \highlight0\f0\fs28\par
\par
Bu sayede art\f2\u305?\f0 k, 3 kredi s\f2\u305?\f0 n\f2\u305?\f0 f\f2\u305?\f0  da KrediManager s\f2\u305?\f0 n\f2\u305?\f0 f\f2\u305?\f0 ndaki Hesapla metoduna sahip.\par
\par
\cf3 3 kredi s\f2\u305?\f0 n\f2\u305?\f0 f\f2\u305?\f0  da Hesapla metodunu farkl\f2\u305?\f0  ele al\f2\u305?\f0 r.\par
\cf0\f1\lang1033\'c7\'fc\f0\lang1055 nk\f1\lang1033\'fc\f0\lang1055  3 kredi \f1\lang1033\'e7\f0\lang1055 e\f2\'ba\f0 idinin de hesaplamada kulland\f2\u305?\u287?\u305?\f0  oranlar vs. farkl\f2\u305?\f0 d\f2\u305?\f0 r.\par
\par
Yani asl\f2\u305?\f0 nda KrediManager s\f2\u305?\f0 n\f2\u305?\f0 f\f2\u305?\f0 , tek ba\f2\'ba\u305?\f0 na hi\f1\lang1033\'e7\f0\lang1055 bir anlam ifade etmiyor.\par
Sadece ebeveyn s\f2\u305?\f0 n\f2\u305?\f0 f g\f1\lang1033\'f6\f0\lang1055 revi g\f1\lang1033\'f6\f0\lang1055 r\f1\lang1033\'fc\f0\lang1055 yor.\par
\par
\cf2\fs36 KURAL  \fs28 -----------------------------------------------------------------------------------\cf0\par
Benzer s\f2\u305?\f0 n\f2\u305?\f0 flar, \cf3 imzas\f2\u305?\f0  tamamen ayn\f2\u305?\cf0\f0  olan ama \cf3 g\f1\lang1033\'f6\f0\lang1055 vdesi farkl\f2\u305?\cf0\f0  \f1\lang1033\'e7\f0\lang1055 al\f2\u305?\'ba\f0 an bir metodu kullanacaksa, \cf3 bu metot imzas\f2\u305?\f0  bir interface i\f1\lang1033\'e7\f0\lang1055 inde tan\f2\u305?\f0 mlan\f2\u305?\f0 r\cf0 .\cf3\par
\cf2 ------------------------------------------------------------------------------------------------\par
\cf0\par
Yukar\f2\u305?\f0 daki kural \f1\lang1033\'e7\f0\lang1055 ok \f1\lang1033\'f6\f0\lang1055 nemlidir.\par
Interface kullan\f2\u305?\f0 m\f2\u305?\f0 n\f2\u305?\f0 n temel kullan\f2\u305?\f0 m ama\f1\lang1033\'e7\f0\lang1055 lar\f2\u305?\f0 ndan birini anlatmaktad\f2\u305?\f0 r.\par
\par
O halde, '\cf3 sadece metot imzas\f2\u305?\f0 n\f2\u305?\f0  ta\f2\'ba\u305?\f0 yan\cf0 ' bir s\f2\u305?\f0 n\f2\u305?\f0 f\f2\u305?\f0  \cf3 interface \cf0 olarak yazar\f2\u305?\f0 z.\par
Dolay\f2\u305?\f0 s\f2\u305?\f0 yla \cf3 KrediManager \cf0 s\f2\u305?\f0 n\f2\u305?\f0 f\f2\u305?\f0 n\f2\u305?\f0  \cf3 interface \cf0 haline d\f1\lang1033\'f6\f0\lang1055 n\f1\lang1033\'fc\f2\lang1055\'ba\f0 t\f1\lang1033\'fc\f0\lang1055 relim.\par
\par
\cf2\highlight4\f3\fs24  interface \cf5 KrediManager                                        \cf2\par
\cf0  \{                                                             \cf2\par
\cf0      \cf2 void \cf0 Hesapla();                                           \par
 \}                                                             \highlight0\f0\fs28\par
\par
Interface bizim i\f1\lang1033\'e7\f0\lang1055 in bir \f2\'ba\f0 ablon g\f1\lang1033\'f6\f0\lang1055 revi g\f1\lang1033\'f6\f0\lang1055 r\f1\lang1033\'fc\f0\lang1055 r.\par
\par
\cf2\fs36 KURAL  \fs28 -----------------------------------------------------------------------------------\cf0\par
\cf3 Bir s\f2\u305?\f0 n\f2\u305?\f0 f, bir interface'i implemente ederse, interface i\f1\lang1033\'e7\f0\lang1055 inde tan\f2\u305?\f0 mlanm\f2\u305?\'ba\f0  t\f1\lang1033\'fc\f0\lang1055 m metotlar\f2\u305?\f0  kullanmak zorundad\f2\u305?\f0 r.\par
\cf2 ------------------------------------------------------------------------------------------------\par
\cf0\par
KrediManager'\f2\u305?\f0  bir interface'e d\f1\lang1033\'f6\f0\lang1055 n\f1\lang1033\'fc\f2\lang1055\'ba\f0 t\f1\lang1033\'fc\f0\lang1055 rd\f1\lang1033\'fc\f2\lang1055\u287?\f1\lang1033\'fc\f0\lang1055 m\f1\lang1033\'fc\f0\lang1055 z anda, onu implemente eden t\f1\lang1033\'fc\f0\lang1055 m s\f2\u305?\f0 n\f2\u305?\f0 flar hata verecektir. \f1\lang1033\'c7\'fc\f0\lang1055 nk\f1\lang1033\'fc\f0\lang1055  o s\f2\u305?\f0 n\f2\u305?\f0 flarda, interface i\f1\lang1033\'e7\f0\lang1055 inde tan\f2\u305?\f0 mlad\f2\u305?\u287?\u305?\f0 m\f2\u305?\f0 z Hesapla metodunu olu\f2\'ba\f0 turmad\f2\u305?\f0 k.\par
\par
\cf2\fs36 KURAL  \fs28 -----------------------------------------------------------------------------------\cf0\par
\cf3 Okunurlu\f2\u287?\f0 u art\f2\u305?\f0 rmak i\f1\lang1033\'e7\f0\lang1055 in Interface isimlendirmesine I harfi ile ba\f2\'ba\f0 lan\f2\u305?\f0 r.\par
\par
\cf2\highlight4\f3\fs24  interface \cf5 IKrediManager                                       \cf3\highlight0\f0\fs28\par
\cf2 ------------------------------------------------------------------------------------------------\par
\cf0\par
\f2\'aa\f0 imdi art\f2\u305?\f0 k t\f1\lang1033\'fc\f0\lang1055 m kredi manager s\f2\u305?\f0 n\f2\u305?\f0 flar\f2\u305?\f0 na giderek, KrediManager interface'inin zorunlu tuttu\f2\u287?\f0 u metotlar\f2\u305?\f0  implemente edelim.\par
\par
\cf2\highlight4\f3\fs24  class \cf5 KonutKrediManager \cf0 :\cf5  IKrediManager                       \cf2\par
\cf0  \{                                                             \par
      \cf2 public void \cf0 Hesapla()                                    \par
      \{                                                        \par
           \cf5 Console\cf0 .Write("\cf3 Konut Kredisi Hesapland\f4\u305?\cf0\f3 ");          \par
      \}                                                        \cf2\par
\cf0  \}                                                             \highlight0\f0\fs28\par
\par
Hen\f1\lang1033\'fc\f0\lang1055 z interface'in as\f2\u305?\f0 l faydas\f2\u305?\f0 na gelmedik. Birazdan \f1\lang1033\'f6\f2\lang1055\u287?\f0 renece\f2\u287?\f0 iz.\par
\par
Yukar\f2\u305?\f0 daki gibi, t\f1\lang1033\'fc\f0\lang1055 m kredi manager s\f2\u305?\f0 n\f2\u305?\f0 flar\f2\u305?\f0 nda Hesapla metodunu implemente ediyoruz.\par
\par
\cf2\fs36 NOT\fs28    --------------------------------------------------------------------------------------\cf0\par
Interface'ler genelde yukar\f2\u305?\f0 da yer alan \f1\lang1033\'f6\f0\lang1055 rnekteki gibi operasyonel metotlar i\f1\lang1033\'e7\f0\lang1055 in kullan\f2\u305?\f0 l\f2\u305?\f0 r.\cf3\par
\cf2 ------------------------------------------------------------------------------------------------\par
\cf0\par
\cf2\highlight4\f3\fs24  static void \cf0 Main(\cf2 string\cf0 [] \cf6 args\cf0 )                               \cf2\par
\cf0  \{                                                             \cf2\par
    \cf5 KonutKrediManager \cf6 konutManager \cf0 =\cf2  new \cf5 KonutKrediManager\cf0 ();  \par
\cf2     \cf6 konutManager\cf0 .Hesapla();\cf2                                     \par
                                                               \par
    \cf5 EmlakKrediManager \cf6 emlakManager \cf0 =\cf2  new \cf5 EmlakKrediManager\cf0 ();  \par
\cf2     \cf6 emlakManager\cf0 .Hesapla();                                    \cf2\par
\cf0  \}                                                             \highlight0\f0\fs28\par
\par
Program.cs dosyas\f2\u305?\f0 nda, yukar\f2\u305?\f0 daki gibi bir kullan\f2\u305?\f0 m yapabiliriz.\par
\par
Fakat biz bu instance'lar\f2\u305?\f0  IKrediManager olarak tan\f2\u305?\f0 mlayabilirdik.\par
\par
\cf2\highlight4\f3\fs24  static void \cf0 Main(\cf2 string\cf0 [] \cf6 args\cf0 )                               \cf2\par
\cf0  \{                                                             \cf2\par
    \cf8 IKrediManager \cf6 konutManager \cf0 =\cf2  new \cf5 KonutKrediManager\cf0 ();      \par
\cf2     \cf6 konutManager\cf0 .Hesapla();\cf2                                     \par
                                                               \par
    \cf8 IKrediManager \cf6 emlakManager \cf0 =\cf2  new \cf5 EmlakKrediManager\cf0 ();      \par
\cf2     \cf6 emlakManager\cf0 .Hesapla();                                    \cf2\par
\cf0  \}                                                             \highlight0\f0\fs28\par
\par
\cf2 'Bir interface, kendisini implemente eden s\f2\u305?\f0 n\f2\u305?\f0 flar\f2\u305?\f0 n referas\f2\u305?\f0 n\f2\u305?\f0  tutabilir'.\par
\par
\cf1\f2\'aa\f0 imdi Dependency Injection konusunu \f1\lang1033\'f6\f2\lang1055\u287?\f0 renece\f2\u287?\f0 iz.\par
\par
\cf0\f2\'aa\f0 imdi kredi ba\f2\'ba\f0 vurular\f2\u305?\f0 n\f2\u305?\f0  alaca\f2\u287?\u305?\f0 m\f2\u305?\f0 z bir class olu\f2\'ba\f0 tural\f2\u305?\f0 m.\par
\par
\cf1 OOP3 \cf0 projemize sa\f2\u287?\f0  t\f2\u305?\f0 klayarak yeni bir class ekliyoruz.\par
Bu class'\f2\u305?\f0  \cf1 BasvuruManager.cs\cf0  olarak isimlendiriyoruz.\par
\par
Ba\f2\'ba\f0 vuruYap metodunda, Kredi hesaplamas\f2\u305?\f0  yapmam\f2\u305?\f0 z gerekiyor.\par
Fakat a\f2\'ba\f0 a\f2\u287?\u305?\f0 daki gibi bir kod yazarsak ne olur?\par
\par
\cf2\highlight4\f3\fs24  class \cf5 BasvuruManager                                          \cf2\par
\cf0  \{                                                             \par
      \cf2 public void \cf0 BasvuruYap()                                 \par
      \{                                                        \par
           \cf5 // Ba\f4\'ba\f3 vuran bilgilerini de\f4\u287?\f3 erlendiren kodlar\cf0         \par
           \cf5 // ...                                              \par
\cf0                                                                \par
\cf2            \cf5\fs20 KonutKrediManager \cf6 konutManager \cf0 =\cf2  new \cf5 KonutKrediManager\cf0 ();     \fs24\par
\cf2            \cf6 konutManager\cf0 .Hesapla();\cf2                              \cf0\par
      \}                                                        \cf2\par
\cf0  \}                                                             \highlight0\f0\fs28\par
\par
B\f1\lang1033\'f6\f0\lang1055 yle bir kod yazarsak,\cf3  \par
'T\f1\lang1033\'fc\f0\lang1055 m ba\f2\'ba\f0 vurular\f2\u305?\f0  KonutKrediManager s\f2\u305?\f0 n\f2\u305?\f0 f\f2\u305?\f0 na ba\f2\u287?\u305?\f0 ml\f2\u305?\f0  hale getirmi\f2\'ba\f0  oluruz.'\par
\cf0 Bu da tamamen hatal\f2\u305?\f0  bir kodlama olurdu.\cf2\par
\cf0\par
Bunun yerine, \cf3 'Ba\f2\'ba\f0 vuruyu hangi kredi i\f1\lang1033\'e7\f0\lang1055 in yapmak istiyorsak, onu bir parametre olarak al\f2\u305?\f0 r\f2\u305?\f0 z'.\par
\par
\cf2\highlight4\f3\fs24  class \cf5 BasvuruManager                                          \cf2\par
\cf0  \{                                                             \par
      \cf2 public void \cf0 BasvuruYap(\cf8 IKrediManager\cf0  \cf6 krediManager\cf0 )       \par
      \{                                                        \par
           \cf5 // Ba\f4\'ba\f3 vuran bilgilerini de\f4\u287?\f3 erlendiren kodlar\cf0         \par
           \cf5 // ...                                              \par
\cf2            \cf6 konutManager\cf0 .Hesapla();\cf2                              \cf0\par
      \}                                                        \cf2\par
\cf0  \}                                                             \highlight0\f0\fs28\par
\cf3\par
\f2\u304?\'ba\f0 te yukar\f2\u305?\f0 daki gibi bir y\f1\lang1033\'f6\f0\lang1055 ntem sayesinde, parametre olarak istedi\f2\u287?\f0 imiz kredi manager tipini yollayabiliriz.\par
\par
Ve hangi tipte kredi manager yollarsak, ONA A\f2\u304?\f0 T HESAPLA METODU \f1\lang1033\'c7\f0\lang1055 ALI\f2\'aa\f0 IR.\par
\par
\cf2 Bu sayede kredi manager s\f2\u305?\f0 n\f2\u305?\f0 flar\f2\u305?\f0 n\f2\u305?\f0 n ba\f2\u287?\u305?\f0 ml\f2\u305?\f0 l\f2\u305?\f0 klar\f2\u305?\f0 ndan kurtulduk.\par
\par
\cf1\f2\'aa\f0 imdi Program.cs taraf\f2\u305?\f0 ndaki kullan\f2\u305?\f0 m\f2\u305?\f0  g\f1\lang1033\'f6\f0\lang1055 relim.\cf2\par
\par
\highlight4\f3\fs24  static void \cf0 Main(\cf2 string\cf0 [] \cf6 args\cf0 )                               \cf2\par
\cf0  \{                                                             \cf2\par
    \cf8 IKrediManager \cf6 konutManager \cf0 =\cf2  new \cf5 KonutKrediManager\cf0 ();      \cf2\par
    \cf8 IKrediManager \cf6 emlakManager \cf0 =\cf2  new \cf5 EmlakKrediManager\cf0 ();      \par
                                                               \par
    \cf5 BasvuruManager \cf6 basvuruManager \cf0 = \cf2 new \cf5 BasvuruManager\cf0 ();      \par
    \cf6 basvuruManager\cf0 .BasvuruYap(\cf6 konutManager\cf0 );                   \par
 \}                                                             \highlight0\f0\fs28\par
\cf3\par
\cf2 Interface sayesinde istedi\f2\u287?\f0 imiz kredi manager'\f2\u305?\f0  ayn\f2\u305?\f0  metoda parametre olarak yollayabildik.\par
Hangi tipte yollarsak, o tipe ait Hesapla metodu \f1\lang1033\'e7\f0\lang1055 al\f2\u305?\'ba\f0 acakt\f2\u305?\f0 r.\par
Bu bilgi en \f1\lang1033\'f6\f0\lang1055 nemli bilgidir.\par
\par
\f2\'aa\f0 imdi diyelim ki m\f1\lang1033\'fc\f2\lang1055\'ba\f0 teriye uygun kredileri belirledik.\par
2 kredi \f1\lang1033\'e7\f0\lang1055 e\f2\'ba\f0 idi uygun \f1\lang1033\'e7\f2\lang1055\u305?\f0 kt\f2\u305?\f0 .\par
Uygun olan kredilerin Hesapla sonucunu g\f1\lang1033\'f6\f0\lang1055 rmek istiyoruz.\par
Yani kredi \f1\lang1033\'f6\f0\lang1055 n bilgilendirmesi yapmak istiyoruz ba\f2\'ba\f0 vuru yapmadan \f1\lang1033\'f6\f0\lang1055 nce. Sadece bilgi almak i\f1\lang1033\'e7\f0\lang1055 in.\par
\par
\cf1 BasvuruManager.cs s\f2\u305?\f0 n\f2\u305?\f0 f\f2\u305?\f0 na gelelim.\par
Uygun krediler i\f1\lang1033\'e7\f0\lang1055 in \f1\lang1033\'f6\f0\lang1055 n bilgilendirme yapan bir metot yazal\f2\u305?\f0 m.\par
\par
\cf2\highlight4\f3\fs24  class \cf5 BasvuruManager                                          \cf2\par
\cf0  \{                                                             \par
      \cf2 public void \cf0 BasvuruYap(\cf8 IKrediManager\cf0  \cf6 krediManager\cf0 )       \par
      \{                                                        \par
\cf2            \cf6 konutManager\cf0 .Hesapla();\cf2                              \cf0\par
      \}                                                        \par
                                                               \par
      \cf2 void \cf0 KrediBilgilendirmeYap(\cf5 List\cf0 <\cf8 IKrediManager\cf0 > \cf6 krediler\cf0 ) \par
      \{                                                        \par
\cf9\f6            \cf1 foreach \cf9 (\cf2 var \cf6 kredi \cf1 in \cf6 krediler\cf9 )\f3                      \f6\par
           \{\f3                                                    \f6\par
               \f3  \cf6\f6 kredi\cf9 .Hesapla();\f3                                \f6\par
           \}\f3                                                    \cf0\par
      \}                                                        \cf2\par
\cf0  \}                                                             \highlight0\f0\fs28\par
\par
Program.cs taraf\f2\u305?\f0 nda kredi listesi yollayarak, t\f1\lang1033\'fc\f0\lang1055 m uygun krediler i\f1\lang1033\'e7\f0\lang1055 in \f1\lang1033\'f6\f0\lang1055 n bilgi alabilirim.\par
\cf2\par
\highlight4\f3\fs24  static void \cf0 Main(\cf2 string\cf0 [] \cf6 args\cf0 )                               \cf2\par
\cf0  \{                                                             \cf2\par
\cf9\f6     \cf8 IKrediManager \cf6 konutKrediManager \cf9 = \cf10 new\cf9  \cf5 KonutKrediManager\cf9 ();\f3  \f6\par
    \cf8 IKrediManager \cf6 emlakKrediManager \cf9 = \cf10 new\cf9  \cf5 EmlakKrediManager\cf9 ();\f3  \f6\par
    \cf5 BasvuruManager \cf6 basvuruManager \cf9 = \cf10 new\cf9  \cf5 BasvuruManager\cf9 ();\f3       \f6\par
\f3                                                                \f6\par
    \cf5 List\cf9 <\cf8 IKrediManager\cf9 > \cf6 krediler \cf9 = \cf10 new\cf9  \cf5 List\cf9 <\cf8 IKrediManager\cf9 > \f3     \f6\par
\f3                     \f6\{ \cf6 konutKrediManager\cf9 , \cf6 emlakKrediManager\cf9\};\f3    \f6\par
    \f3                                                            \f6\par
\f3     \cf6\f6 basvuruManager\cf9 .KrediBilgilendirmeYap(\cf6 krediler\cf9 );\f3             \f6\par
\cf0\f3  \}                                                             \highlight0\f0\fs28\par
\cf2\par
\par
\cf0\par
\cf1\fs36 3. DERS\fs28    ---------------------------------------------------------------------------------\par
\par
\cf0 Interface'ler, alternatif sistemler i\f1\lang1033\'e7\f0\lang1055 in bir \f2\'ba\f0 ablon g\f1\lang1033\'f6\f0\lang1055 revi g\f1\lang1033\'f6\f0\lang1055 r\f1\lang1033\'fc\f0\lang1055 r.\par
Ayn\f2\u305?\f0  zamanda referans tutucu g\f1\lang1033\'f6\f0\lang1055 revi g\f1\lang1033\'f6\f0\lang1055 r\f1\lang1033\'fc\f0\lang1055 r.\par
\cf2\par
Interface'leri, birbiribin alternatifi olan ama kod i\f1\lang1033\'e7\f0\lang1055 erikleri farkl\f2\u305?\f0  olan durumlar i\f1\lang1033\'e7\f0\lang1055 in kullan\f2\u305?\f0 r\f2\u305?\f0 z.\par
\f1\lang1033\'d6\f0\lang1055 rne\f2\u287?\f0 in t\f1\lang1033\'fc\f0\lang1055 m krediler i\f1\lang1033\'e7\f0\lang1055 in geri \f1\lang1033\'f6\f0\lang1055 deme plan\f2\u305?\f0  ortakt\f2\u305?\f0 r. Ama kodlar\f2\u305?\f0  farkl\f2\u305?\f0 d\f2\u305?\f0 r.\par
Bu durumda interface olu\f2\'ba\f0 tururuz.\par
\par
\cf0 Bir ba\f2\'ba\f0 ka \f1\lang1033\'f6\f0\lang1055 rnek,\par
\f1\lang1033\'d6\f0\lang1055 rne\f2\u287?\f0 in projemizde loglama yapmak istiyoruz.\par
Loglama sim\f1\lang1033\'fc\f0\lang1055 lasyonunu projemize enjekte edelim.\par
\par
Loglama farkl\f2\u305?\f0  y\f1\lang1033\'f6\f0\lang1055 ntemlerle uygulanabilir.\par
Loglar, text dosyas\f2\u305?\f0 nda tutulabilir, veritaban\f2\u305?\f0 nda tutulabilir, sms veya mail olarak olu\f2\'ba\f0 turulabilir.\par
Hepsi loglamad\f2\u305?\f0 r, imzalar\f2\u305?\f0  ayn\f2\u305?\f0 d\f2\u305?\f0 r.\par
Ancak ayn\f2\u305?\f0  zamanda hepsinin kodlar\f2\u305?\f0  da farkl\f2\u305?\f0 d\f2\u305?\f0 r.\par
\par
\cf2\fs36 NOT\fs28    --------------------------------------------------------------------------------------\cf0\par
\cf3 Ne zaman interface kullanmam\f2\u305?\f0 z gerekti\f2\u287?\f0 ine nas\f2\u305?\f0 l karar verece\f2\u287?\f0 iz?\cf0\par
Sistemimizde, bir i\f2\'ba\f0 in alternatifleri de varsa (veya ilerleyen zamanlarda alternatif olu\f2\'ba\f0 ma ihtimali varsa) interface kullan\f2\u305?\f0 l\f2\u305?\f0 r.\par
\par
Mesela projede \f2\'ba\f0 imdilik yaln\f2\u305?\f0 zca 1 \f1\lang1033\'e7\f0\lang1055 e\f2\'ba\f0 it loglama yap\f2\u305?\f0 yor olabiliriz.\par
Bu loglama \f1\lang1033\'e7\f0\lang1055 e\f2\'ba\f0 idi de sadece text dosyas\f2\u305?\f0 na loglama yap\f2\u305?\f0 yordur.\par
Fakat biz yine de ILoggerService ad\f2\u305?\f0 nda bir interface olu\f2\'ba\f0 turmal\f2\u305?\f0 y\f2\u305?\f0 z.\par
\f1\lang1033\'c7\'fc\f0\lang1055 nk\f1\lang1033\'fc\f0\lang1055  ileride projemize veritaban\f2\u305?\f0  loglama mant\f2\u305?\u287?\u305?\f0  eklenebilir.\cf3\par
\cf2 ------------------------------------------------------------------------------------------------\par
\par
\fs36 NOT\fs28    --------------------------------------------------------------------------------------\cf0\par
Bu dersten itibaren operasyon i\f1\lang1033\'e7\f0\lang1055 eren interface isimlerini \cf3 Service \cf0 olarak verece\f2\u287?\f0 iz.\cf3\par
\cf2 ------------------------------------------------------------------------------------------------\cf0\par
\par
\par
\cf1\f2\'aa\f0 imdi OOP3 projemize bir log sim\f1\lang1033\'fc\f0\lang1055 lasyonu ekleyelim.\cf0\par
\cf2\par
\cf0\f2\'aa\f0 imdi Log i\f1\lang1033\'e7\f0\lang1055 in bir interface olu\f2\'ba\f0 tural\f2\u305?\f0 m.\par
\par
\cf1 OOP3 \cf0 projemize sa\f2\u287?\f0  t\f2\u305?\f0 klayarak yeni bir interface ekliyoruz.\par
Bu interface'i \cf1 ILoggerService.cs \cf0 olarak isimlendiriyoruz.\par
\highlight4\f3\fs24\par
\cf2  interface \cf8 ILoggerService\cf5                                       \cf2\par
\cf0  \{                                                             \cf2\par
\cf0      \cf2 void \cf0 Log();                                               \par
 \}                                                             \highlight0\f0\fs28\par
\highlight4\f3\fs24\par
\cf1\highlight0\f0\fs28 G\f1\lang1033\'f6\f0\lang1055 r\f1\lang1033\'fc\f0\lang1055 ld\f1\lang1033\'fc\f2\lang1055\u287?\f1\lang1033\'fc\f0\lang1055  gibi interface i\f1\lang1033\'e7\f0\lang1055 inde yaln\f2\u305?\f0 zca metot imzas\f2\u305?\f0 n\f2\u305?\f0  tan\f2\u305?\f0 mlad\f2\u305?\f0 k.\par
\par
\f2\'aa\f0 imdi veritaban\f2\u305?\f0 na log yapacak olan ilgili class'\f2\u305?\f0  olu\f2\'ba\f0 tural\f2\u305?\f0 m.\par
\par
OOP3 \cf0 projemize sa\f2\u287?\f0  t\f2\u305?\f0 klayarak yeni bir class ekliyoruz.\par
Bu class'\f2\u305?\f0  \cf1 DatabaseLoggerService.cs \cf0 olarak isimlendiriyoruz.\par
\cf1\par
\cf2\highlight4\f3\fs24  class \cf5 DatabaseLoggerService \cf0 :\cf5  \cf8 ILoggerService                  \cf2\par
\cf0  \{                                                             \par
      \cf2 public void \cf0 Log()                                        \par
      \{                                                        \par
           \cf5 Console\cf0 .Write("\cf3 Veritaban\f4\u305?\f3 na Logland\f4\u305?\cf0\f3 ");             \par
      \}                                                        \cf2\par
\cf0  \}                                                             \highlight0\f0\fs28\par
\cf1\par
OOP3 \cf0 projemize sa\f2\u287?\f0  t\f2\u305?\f0 klayarak yeni bir class ekliyoruz.\par
Bu class'\f2\u305?\f0  \cf1 FileLoggerService.cs \cf0 olarak isimlendiriyoruz.\par
\highlight4\f3\fs24\par
\cf2  class \cf5 FileLoggerService \cf0 :\cf5  \cf8 ILoggerService                      \cf2\par
\cf0  \{                                                             \par
      \cf2 public void \cf0 Log()                                        \par
      \{                                                        \par
           \cf5 Console\cf0 .Write("\cf3 Dosyaya Logland\f4\u305?\cf0\f3 ");                  \par
      \}                                                        \cf2\par
\cf0  \}                                                             \highlight0\f0\fs28\par
\par
Bu \f2\'ba\f0 ekilde 2 adet loglama sistemine sahip olduk.\par
Art\f2\u305?\f0 k loglama s\f2\u305?\f0 n\f2\u305?\f0 flar\f2\u305?\f0 mda, ILoggerService \f2\'ba\f0 ablonuna uymak zorunday\f2\u305?\f0 z.\par
\par
\f2\'aa\f0 imdi BasvuruManager s\f2\u305?\f0 n\f2\u305?\f0 f\f2\u305?\f0 ndaki BasvuruYap metodunda loglama yapmak istedi\f2\u287?\f0 imizi d\f1\lang1033\'fc\f2\lang1055\'ba\f1\lang1033\'fc\f0\lang1055 nelim.\par
\par
\cf2\highlight4\f3\fs24  class \cf5 BasvuruManager                                          \cf2\par
\cf0  \{                                                             \par
      \cf2 public void \cf0 BasvuruYap(\cf8 IKrediManager\cf0  \cf6 krediManager\cf0 ,\cf6        \par
                             \cf8 ILoggerService \cf6 loggerService\cf0 )     \par
      \{                                                        \par
\cf2            \cf6 konutManager\cf0 .Hesapla();\cf2                              \par
           \cf6 loggerService\cf2 .\cf0 Log();                                \par
      \}                                                        \cf2\par
\cf0  \}                                                             \highlight0\f0\fs28\par
\par
G\f1\lang1033\'f6\f0\lang1055 r\f1\lang1033\'fc\f0\lang1055 ld\f1\lang1033\'fc\f2\lang1055\u287?\f1\lang1033\'fc\f0\lang1055  gibi, interface tipinde bir parameter yollad\f2\u305?\f0 k.\par
Bu sayede metoda hangi log s\f2\u305?\f0 n\f2\u305?\f0 f\f2\u305?\f0  t\f1\lang1033\'fc\f0\lang1055 r\f1\lang1033\'fc\f0\lang1055 nde bir parametre verilirse, o s\f2\u305?\f0 n\f2\u305?\f0 fa ait Log metodu \f1\lang1033\'e7\f0\lang1055 al\f2\u305?\'ba\f0 acakt\f2\u305?\f0 r.\par
\par
Burada \cf3 Dependency Injection\cf0  uygulam\f2\u305?\'ba\f0  olduk.\par
Asl\f2\u305?\f0 nda bu \f1\lang1033\'f6\f0\lang1055 rnekteki haline \cf3 Method Injection \cf0 deniyor.\par
Bir de \cf3 Constructor Injection \cf0 hali vard\f2\u305?\f0 r. \f1\lang1033\'d6\f0\lang1055 dev olarak verilecek.\par
\par
Yukar\f2\u305?\f0 daki koda bakal\f2\u305?\f0 m.\par
Ba\f2\'ba\f0 vuru Yaparken, \cf1 hangi kredi t\f1\lang1033\'fc\f0\lang1055 r\f1\lang1033\'fc\f0\lang1055 ne ve hangi loglama t\f1\lang1033\'fc\f0\lang1055 r\f1\lang1033\'fc\f0\lang1055 ne ait oldu\f2\u287?\f0 u belli DE\f2\u286?\u304?\f0 L.\par
Sadece soyut halleri mevcut.\par
\par
\cf2\fs36 NOT\fs28    --------------------------------------------------------------------------------------\cf0\par
SOLID Prensiplerinin Open/Closed prensibi der ki;\par
projeye yeni bir istek eklendi\f2\u287?\f0 inde, mevcut kodlar\f2\u305?\f0 n hi\f1\lang1033\'e7\f0\lang1055 biri bozulmamal\f2\u305?\f0  ve de\f2\u287?\f0 i\f2\'ba\f0 tirilmemelidir.\par
\par
Biz \f1\lang1033\'f6\f0\lang1055 yle bir proje yazd\f2\u305?\f0 k ki, sisteme yeni bir Log service eklememiz gerekirse (\f1\lang1033\'f6\f0\lang1055 rne\f2\u287?\f0 in SmsLoggerService) veya yeni bir kredi eklememiz gerekirse (\f1\lang1033\'f6\f0\lang1055 rne\f2\u287?\f0 in EsnafKrediManager) sistemde soyutlamay\f2\u305?\f0  \f1\lang1033\'e7\f0\lang1055 ok do\f2\u287?\f0 ru in\f2\'ba\f0 a etti\f2\u287?\f0 imiz i\f1\lang1033\'e7\f0\lang1055 in, hi\f1\lang1033\'e7\f0\lang1055 bir de\f2\u287?\f0 i\f2\'ba\f0 ime ihtiya\f1\lang1033\'e7\f0\lang1055  duymadan veya eski kodlar\f2\u305?\f0  bozmadan sisteme ekleyebiliriz. \f1\lang1033\'c7\'fc\f0\lang1055 nk\f1\lang1033\'fc\f0\lang1055  interface sayesinde projemize bir esneklik kazand\f2\u305?\f0 rd\f2\u305?\f0 k.\cf3\par
\cf2 ------------------------------------------------------------------------------------------------\cf1\par
\par

\pard\sl276\slmult1\qc\par
------------------------------------------------------------------------------------------------\par
\fs48 5. G\f1\lang1033\'fc\f0\lang1055 n Sonu\f2\fs28\par

\pard\sl276\slmult1\qj\f0 ------------------------------------------------------------------------------------------------\cf0\f1\fs22\lang31\par
}
 