{\rtf1\ansi\ansicpg1254\deff0\nouicompat\deflang1055{\fonttbl{\f0\fnil\fcharset162 Calibri;}{\f1\fnil\fcharset238 Calibri;}{\f2\fnil\fcharset0 Calibri;}{\f3\fnil\fcharset0 Lucida Console;}}
{\colortbl ;\red255\green0\blue0;\red255\green0\blue255;\red0\green77\blue187;\red204\green180\blue0;\red0\green176\blue80;\red75\green172\blue198;\red155\green187\blue89;}
{\*\generator Riched20 10.0.17763}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\qj\b\f0\fs28 Giri\f1\'ba\b0\f0\par
7. videoda final projemize ba\f1\'ba\f0 lam\f1\u305?\'ba\f0 t\f1\u305?\f0 k.\par
Bu projede, kurumsal yaz\f1\u305?\f0 l\f1\u305?\f0 mlarda olmas\f1\u305?\f0  gerekti\f1\u287?\f0 i gibi bir mimari olu\f1\'ba\f0 turmu\f1\'ba\f0 tuk. Her ne kadar bu proje OOP mant\f1\u305?\u287?\u305?\f0 na uygun olsa da mevcut haliyle bir\f2\lang1033\'e7\f0\lang1055 ok eksi\f1\u287?\f0 i bulunuyor.\par
Proje, hem soyutlama prensipleri a\f2\lang1033\'e7\f1\lang1055\u305?\f0 s\f1\u305?\f0 ndan eksiklikler bar\f1\u305?\f0 nd\f1\u305?\f0 r\f1\u305?\f0 yor hem de i\f2\lang1033\'e7\f0\lang1055 erdi\f1\u287?\f0 i teknolojiler a\f2\lang1033\'e7\f1\lang1055\u305?\f0 s\f1\u305?\f0 ndan \f2\lang1033\'e7\f0\lang1055 ok ilkel durumda.\par
Projemiz \f1\'ba\f0 u anda yaln\f1\u305?\f0 zca \cf1 InMemory \cf0 tabanl\f1\u305?\f0  \f2\lang1033\'e7\f0\lang1055 al\f1\u305?\'ba\f0 maktad\f1\u305?\f0 r. Datalar\f1\u305?\f0 n depoland\f1\u305?\u287?\u305?\f0  bir database hen\f2\lang1033\'fc\f0\lang1055 z projeye dahil edilmemi\f1\'ba\f0 tir.\par
Bu derste \cf1 EntityFramework\cf0  teknolojisinden faydalanarak projemizdeki s\f1\u305?\f0 n\f1\u305?\f0 flar\f1\u305?\f0 , ger\f2\lang1033\'e7\f0\lang1055 ek bir database ile ili\f1\'ba\f0 kilendirece\f1\u287?\f0 iz. \par
Database i\f2\lang1033\'e7\f0\lang1055 in, Windows i\f1\'ba\f0 letim sisteminin bize sundu\f1\u287?\f0 u \cf1 SQL Server LocalDB\cf0  servisinden faydalanaca\f1\u287?\u305?\f0 z.  \par
Bilgisayar\f1\u305?\f0 m\f1\u305?\f0 zda mevcut olan bu LocalDB, SQL Server Express veritaban\f1\u305?\f0  altyap\f1\u305?\f0 s\f1\u305?\f0 n\f1\u305?\f0 n hafif bir s\f2\lang1033\'fc\f0\lang1055 r\f2\lang1033\'fc\f0\lang1055 m\f2\lang1033\'fc\f0\lang1055 d\f2\lang1033\'fc\f0\lang1055 r.\par
Visual Studio \f2\lang1033\'fc\f0\lang1055 zerinden \cf1 SQL Server Object Explorer\cf0  yard\f1\u305?\f0 m\f1\u305?\f0 yla, database'e eri\f1\'ba\f0 im sa\f1\u287?\f0 layaca\f1\u287?\u305?\f0 z.\par
Projemizi ger\f2\lang1033\'e7\f0\lang1055 ek bir veritaban\f1\u305?\f0  ile ili\f1\'ba\f0 kilendirmeden \f2\lang1033\'f6\f0\lang1055 nce projemizdeki baz\f1\u305?\f0  soyutlama eksikliklerini giderece\f1\u287?\f0 iz. \par
\f2\lang1033\'d6\f0\lang1055 rne\f1\u287?\f0 in DataAccess katman\f1\u305?\f0 nda, her Entity s\f1\u305?\f0 n\f1\u305?\f0 f\f1\u305?\f0  i\f2\lang1033\'e7\f0\lang1055 in birer Interface yazm\f1\u305?\'ba\f0 t\f1\u305?\f0 k. Bu Interface'lerin hepsi "\cf1 GetAll, Get, Add, Update, Delete\cf0 " operasyonlar\f1\u305?\f0  i\f2\lang1033\'e7\f0\lang1055 eriyordu. Hepsinde ortak olan bu metot imzalar\f1\u305?\f0 n\f1\u305?\f0  Generic bir Interface'e ta\f1\'ba\u305?\f0 yarak SOLID prensiplerine uygun bir yap\f1\u305?\f0  olu\f1\'ba\f0 turaca\f1\u287?\u305?\f0 z. Yani bir \cf1 Generic Interface \cf0 olu\f1\'ba\f0 turaca\f1\u287?\u305?\f0 z.\par
Daha sonra projemize EntityFramework dahil ederek; veritaban\f1\u305?\f0  ba\f1\u287?\f0 lant\f1\u305?\f0 s\f1\u305?\f0  olu\f1\'ba\f0 turmay\f1\u305?\f0  ve Class/Table ili\f1\'ba\f0 kilendirmesi yapmay\f1\u305?\f0  \f2\lang1033\'f6\f1\lang1055\u287?\f0 renece\f1\u287?\f0 iz.\par
\cf2 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \cf0\par
\b Dakika 22:40\b0\par
Data Access katman\f1\u305?\f0 nda, Category s\f1\u305?\f0 n\f1\u305?\f0 f\f1\u305?\f0  i\f2\lang1033\'e7\f0\lang1055 in \cf1 ICategoryDal\cf0  isminde bir Interface olu\f1\'ba\f0 turuyoruz.\par
Product nesneleri i\f2\lang1033\'e7\f0\lang1055 in IProductDal ad\f1\u305?\f0 nda bir interface zaten yazm\f1\u305?\'ba\f0 t\f1\u305?\f0 k. Bu interface i\f2\lang1033\'e7\f0\lang1055 erisinde "\cf1 GetAll, Add, Update, Delete, GetAllByCategory\cf0 " olmak \f2\lang1033\'fc\f0\lang1055 zere toplamda 5 adet metot imzas\f1\u305?\f0  tan\f1\u305?\f0 mlam\f1\u305?\'ba\f0 t\f1\u305?\f0 k. Benzer \f1\'ba\f0 ekilde bu tan\f1\u305?\f0 mlamalar\f1\u305?\f0 , ICategoryDal interface'i i\f2\lang1033\'e7\f0\lang1055 in de yazmal\f1\u305?\f0 y\f1\u305?\f0 z.\par
Bu i\f1\'ba\f0 lemi ger\f2\lang1033\'e7\f0\lang1055 ekle\f1\'ba\f0 tirmek i\f2\lang1033\'e7\f0\lang1055 in, ilk olarak ilkel yakla\f1\'ba\u305?\f0 m\f1\u305?\f0  g\f2\lang1033\'f6\f0\lang1055 rmek ad\f1\u305?\f0 na, IProductDal i\f2\lang1033\'e7\f0\lang1055 indeki t\f2\lang1033\'fc\f0\lang1055 m metot imzalar\f1\u305?\f0 n\f1\u305?\f0  kopyalayarak ICategoryDal interface'ine yap\f1\u305?\'ba\f0 t\f1\u305?\f0 r\f1\u305?\f0 yoruz. Kopyalanan metot imzalar\f1\u305?\f0 nda Product yazan keyword'leri tek tek Category olarak de\f1\u287?\f0 i\f1\'ba\f0 tiriyoruz.\par
\cf3 public interface \cf4 ICategoryDal\cf0\par
\{\par
\tab\cf5 List\cf0 <\cf5 Category\cf0 >  GetAll\f3 ()\f0 ;\par
\tab\cf3 void \cf0 Add\f3 (\cf5\f0 Category \cf6 category\cf0\f3 )\f0 ;\par
\tab\cf3 void \cf0 Update\f3 (\cf5\f0 Category \cf6 category\cf0\f3 )\f0 ;\par
\tab\cf3 void \cf0 Delete\f3 (\cf5\f0 Category \cf6 category\cf0\f3 )\f0 ;\par
\tab\cf5 List\cf0 <\cf5 Category\cf0 > GetAllByCategory\f3 (\cf3\f0 int \cf6 categoryId\cf0\f3 )\f0 ;\par
\}\par
\cf2 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \cf0\par
\b Dakika 27:38\b0\par
\f1\u304?\'ba\f0 te  tam burada, yazd\f1\u305?\u287?\u305?\f0 m\f1\u305?\f0 z kodlar\f1\u305?\f0 n asl\f1\u305?\f0 nda her 2 interface'te de tekrar etti\f1\u287?\f0 ini g\f2\lang1033\'f6\f0\lang1055 r\f2\lang1033\'fc\f0\lang1055 yoruz. Bu tasar\f1\u305?\f0 m\f1\u305?\f0  SOLID prensiplerine uygun yapmak ad\f1\u305?\f0 na, bu 2 interface'in de implemente edebilece\f1\u287?\f0 i bir \cf1 Generic Interface \cf0 olu\f1\'ba\f0 turma karar\f1\u305?\f0  al\f1\u305?\f0 yoruz.\par
Bu yap\f1\u305?\f0 ya; \cf1 Generic Repository Design Pattern \cf0 denir.\par
Data Access katman\f1\u305?\f0 nda, \cf1 IEntityRepository\cf0  ad\f1\u305?\f0 nda bir Interface olu\f1\'ba\f0 turuyoruz. Bu isimlendirmede "Entity" kelimesini tercih etmemizin sebebi; ileride veritaban\f1\u305?\f0  nesnesi olacak olan t\f2\lang1033\'fc\f0\lang1055 m s\f1\u305?\f0 n\f1\u305?\f0 flar taraf\f1\u305?\f0 ndan kullan\f1\u305?\f0 labilece\f1\u287?\f0 ini belirtmek i\f2\lang1033\'e7\f0\lang1055 indir. (Customer, Product, Category vb.)\par
Daha \f2\lang1033\'f6\f0\lang1055 nce IProductDal ve ICategoryDal i\f2\lang1033\'e7\f0\lang1055 in yazd\f1\u305?\u287?\u305?\f0 m\f1\u305?\f0 z metot tan\f1\u305?\f0 mlamalar\f1\u305?\f0 n\f1\u305?\f0  tamamen siliyoruz. T\f2\lang1033\'fc\f0\lang1055 m s\f1\u305?\f0 n\f1\u305?\f0 flara hitap edecek genel bir Interface yaz\f1\u305?\f0 yoruz. Bunu yapabilmek i\f2\lang1033\'e7\f0\lang1055 in Generic yap\f1\u305?\f0 dan yard\f1\u305?\f0 m al\f1\u305?\f0 yoruz.\par
\cf3 public interface \cf4 IEntityRepository\cf0 <\cf4 T\cf0 >\par
\{\par
\tab\cf5 List\cf0 <\cf4 T\cf0 >  GetAll\f3 ()\f0 ;\par
\cf4\tab T\cf0  Get\f3 ()\f0 ;\par
\tab\cf3 void \cf0 Add\f3 (\cf4\f0 T \cf6 entity\cf0\f3 )\f0 ;\par
\tab\cf3 void \cf0 Update\f3 (\cf4\f0 T \cf6 entity\cf0\f3 )\f0 ;\par
\tab\cf3 void \cf0 Delete\f3 (\cf4\f0 T \cf6 entity\cf0\f3 )\f0 ;\par
\}\par
Normalde temel olarak 5 adet operasyon kullan\f1\u305?\f0 l\f1\u305?\f0 r:\par
\tab - Veri Ekleme\par
\tab - Veri G\f2\lang1033\'fc\f0\lang1055 ncelleme\par
\tab - Veri Silme\par
\tab - \f2\lang1033\'c7\f0\lang1055 oklu Veri Getirme\par
\tab - Tek Veri Getirme\par
\par
Ancak yazd\f1\u305?\u287?\u305?\f0 m\f1\u305?\f0 z bu Generic Interface tan\f1\u305?\f0 m\f1\u305?\f0 nda hala bir eksiklik mevcut. \par
\f2\lang1033\'c7\'fc\f0\lang1055 nk\f2\lang1033\'fc\f0\lang1055  "\cf1\f2\lang1033\'c7\f0\lang1055 oklu Veri Getirme\cf0 " ve "\cf1 Tek Veri Getirme\cf0 " operasyonlar\f1\u305?\f0 na esnek bir yap\f1\u305?\f0  kazand\f1\u305?\f0 rmam\f1\u305?\f0 z gerekiyor.\par
Bir entity i\f2\lang1033\'e7\f0\lang1055 in  \cf1 GetAll\f3 ()\cf0\f0   metodunu kullan\f1\u305?\f0 rken, tablodaki t\f2\lang1033\'fc\f0\lang1055 m veriyi de almak isteyebiliriz, istedi\f1\u287?\f0 imiz \f1\'ba\f0 artlara uyan s\f1\u305?\f0 n\f1\u305?\f0 rl\f1\u305?\f0  say\f1\u305?\f0 da veriyi de almak isteyebiliriz. Nihayetinde bu metot "\f2\lang1033\'c7\f0\lang1055 oklu Veri Getirme" amac\f1\u305?\f0 na hizmet ediyor. Tablodaki t\f2\lang1033\'fc\f0\lang1055 m veriyi de getirebilmeli, istedi\f1\u287?\f0 imiz \f1\'ba\f0 artlara uyan s\f1\u305?\f0 n\f1\u305?\f0 rl\f1\u305?\f0  say\f1\u305?\f0 da veriyi de getirebilmeli.\par
Benzer \f1\'ba\f0 ekilde \cf1 Get\f3 ()\f0  \cf0 metodu da, istedi\f1\u287?\f0 imiz \f1\'ba\f0 arta uyan tek veriyi bize getirebilmeli. Yani de\f1\u287?\f0 i\f1\'ba\f0 en kullan\f1\u305?\f0 mlara g\f2\lang1033\'f6\f0\lang1055 re, herhangi bir tablodan herhangi tek bir veriyi getirebilmeli. \par
Bu sebepten dolay\f1\u305?\f0  hem \cf1 GetAll\f3 ()\cf0\f0  metodunu hem de \cf1 Get\f3 ()\cf0\f0  metodunu esnek bir yap\f1\u305?\f0 yla yazmam\f1\u305?\f0 z gerekiyor. \cf1 Yani \f2\lang1033\'f6\f0\lang1055 zet olarak, bu 2 metot da filtrelenebilir olmal\f1\u305?\f0 d\f1\u305?\f0 r\cf0 .\par
\cf2 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\par
\cf0\b Dakika 33:10\cf2\b0  \par
\cf0\f1\u304?\'ba\f0 te bu metotlara filtre yollayabilmek i\f2\lang1033\'e7\f0\lang1055 in \cf1 Expression \cf0 isimli yap\f1\u305?\f0 y\f1\u305?\f0  kullan\f1\u305?\f0 yoruz.\par
Bu yap\f1\u305?\f0 y\f1\u305?\f0  kullanabilmek i\f2\lang1033\'e7\f0\lang1055 in \cf1 using System.Linq.Expressions;\cf0  tan\f1\u305?\f0 mlamas\f1\u305?\f0  yazmam\f1\u305?\f0 z gerekmektedir.\cf2\par
\cf0 Yani biz metodu kulland\f1\u305?\u287?\u305?\f0 m\f1\u305?\f0 z anda, istedi\f1\u287?\f0 imiz sorguyu parametre olarak yollamak istiyoruz. \par
\tab _productService.Get\f3 (\cf6\f0 p\cf0  => \cf6 p\cf0 .PategoryId == 1\f3 )\f0 ;\par
Yukar\f1\u305?\f0 daki gibi bir kullan\f1\u305?\f0 m\f1\u305?\f0  sa\f1\u287?\f0 layabilmek i\f2\lang1033\'e7\f0\lang1055 in; a\f1\'ba\f0 a\f1\u287?\u305?\f0 daki gibi bir metot imzas\f1\u305?\f0  tan\f1\u305?\f0 mlamal\f1\u305?\f0 y\f1\u305?\f0 z.\tab\cf2\par
\tab\cf4 T\cf0   Get\f3 (\cf5\f0 Expression\cf0 <\cf5 Func\cf0 <\cf4 T\cf0 , \cf3 bool\cf0 >> \cf6 filter\cf0\f3 )\f0 ;\cf2\par
\cf0 Bu yap\f1\u305?\f0 n\f1\u305?\f0 n syntax'\f1\u305?\f0 n\f1\u305?\f0  anlayabilmek i\f2\lang1033\'e7\f0\lang1055 in Delegate yap\f1\u305?\f0 s\f1\u305?\f0 n\f1\u305?\f0  bilmemiz gerekiyor. Ama biz \f1\'ba\f0 imdilik i\f1\'ba\f0 imize yarayacak haliyle bu yap\f1\u305?\f0 y\f1\u305?\f0  kullanal\f1\u305?\f0 m.\par
\f1\'aa\f0 imdi Generic Interface tan\f1\u305?\f0 mlamam\f1\u305?\f0 z\f1\u305?\f0  en son haline d\f2\lang1033\'f6\f0\lang1055 n\f2\lang1033\'fc\f1\lang1055\'ba\f0 t\f2\lang1033\'fc\f0\lang1055 relim.\par
\cf3 public interface \cf4 IEntityRepository\cf0 <\cf4 T\cf0 >\par
\{\par
\tab\cf5 List\cf0 <\cf4 T\cf0 >  GetAll\f3 (\cf5\f0 Expression\cf0 <\cf5 Func\cf0 <\cf4 T\cf0 , \cf3 bool\cf0 >> \cf6 filter \cf0 = \cf3 null\cf0\f3 )\f0 ;\par
\cf4\tab T\cf0  Get\f3 (\cf5\f0 Expression\cf0 <\cf5 Func\cf0 <\cf4 T\cf0 , \cf3 bool\cf0 >> \cf6 filter\cf0\f3 )\f0 ;\par
\tab\cf3 void \cf0 Add\f3 (\cf4\f0 T \cf6 entity\cf0\f3 )\f0 ;\par
\tab\cf3 void \cf0 Update\f3 (\cf4\f0 T \cf6 entity\cf0\f3 )\f0 ;\par
\tab\cf3 void \cf0 Delete\f3 (\cf4\f0 T \cf6 entity\cf0\f3 )\f0 ;\par
\}\par
Art\f1\u305?\f0 k bu haliyle birlikte, Generic Interface'imiz son halini alm\f1\u305?\'ba\f0  oldu.\par
Expression kullanarak "filter" ad\f1\u305?\f0 nda bir parametre tan\f1\u305?\f0 mlamas\f1\u305?\f0  yapt\f1\u305?\f0 k.\par
\cf6 filter \cf0 = \cf3 null \cf0 demek "\cf1 bu metot parametre olarak bir filtreleme sorgusu almak zorunda de\f1\u287?\f0 ildir\cf0 "\cf1  \cf0 anlam\f1\u305?\f0 na gelir.\par
\cf6 filter \cf0 olarak yazd\f1\u305?\u287?\u305?\f0 m\f1\u305?\f0 zda ise "\cf1 bu metot parametre olarak mutlaka bir filtreleme sorgusu almak zorundad\f1\u305?\f0 r\cf0 " anlam\f1\u305?\f0 na gelir.\cf2\par
\cf0 GetAll metodu bir filtreleme sorgusu almak zorunda de\f1\u287?\f0 ildir. \f2\lang1033\'c7\'fc\f0\lang1055 nk\f2\lang1033\'fc\f0\lang1055  sorgu vermedi\f1\u287?\f0 imiz zaman "t\f2\lang1033\'fc\f0\lang1055 m veriyi" d\f2\lang1033\'f6\f0\lang1055 nd\f2\lang1033\'fc\f0\lang1055 r\f2\lang1033\'fc\f0\lang1055 r.\par
Ancak Get metodu filtreleme sorgusu almak zorundad\f1\u305?\f0 r. Sorgu almazsa hangi tek veriyi d\f2\lang1033\'f6\f0\lang1055 nd\f2\lang1033\'fc\f0\lang1055 rece\f1\u287?\f0 ini bilemez.\cf2\par
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \cf0\par
\b Dakika 39:25\cf2\b0\par
\cf0 Art\f1\u305?\f0 k Data Access katman\f1\u305?\f0 ndaki Interface'lere, az \f2\lang1033\'f6\f0\lang1055 nce olu\f1\'ba\f0 turdu\f1\u287?\f0 umuz Generic Interface'i implemente edebiliriz.\cf2\par
\cf3 public interface \cf4 IProductDal \cf0 :\cf4  IEntityRepository\cf0 <\cf5 Product\cf0 >\par
\{\par
\}\par
\cf2 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \par
\cf0\b Dakika 1:07:36\cf2\b0\par
\cf0 T\f2\lang1033\'fc\f0\lang1055 m veritaban\f1\u305?\f0  varl\f1\u305?\f0 klar\f1\u305?\f0  i\f2\lang1033\'e7\f0\lang1055 in kapsay\f1\u305?\f0 c\f1\u305?\f0  bir Generic Interface yazd\f1\u305?\f0 k. Fakat bu interface'i yazarken <T> \f1\'ba\f0 eklinde bir yap\f1\u305?\f0  kulland\f1\u305?\f0 k. Zaten Generic tan\f1\u305?\f0 mlamalar\f1\u305?\f0 n do\f1\u287?\f0 as\f1\u305?\f0  gere\f1\u287?\f0 i, T ifadesi herhangi bir tipe kar\f1\'ba\u305?\f0 l\f1\u305?\f0 k gelebilir demektir. Ancak biz bu esnekli\f1\u287?\f0 i s\f1\u305?\f0 n\f1\u305?\f0 rland\f1\u305?\f0 rmak istiyoruz. \f2\lang1033\'c7\'fc\f0\lang1055 nk\f2\lang1033\'fc\f0\lang1055  yazd\f1\u305?\u287?\u305?\f0 m\f1\u305?\f0 z bu Generic Interface kullan\f1\u305?\f0 l\f1\u305?\f0 rken alakas\f1\u305?\f0 z herhangi bir tip de T olarak kullan\f1\u305?\f0 labilir. \par
\cf3 public interface \cf4 IProductDal \cf0 :\cf4  IEntityRepository\cf0 <\cf3 int\cf0 >\par
\{\par
\}\par
Yukar\f1\u305?\f0 daki gibi bir kullan\f1\u305?\f0 m\f1\u305?\f0 n olmas\f1\u305?\f0 n\f1\u305?\f0  istemiyoruz. Yaln\f1\u305?\f0 zca varl\f1\u305?\f0 k s\f1\u305?\f0 n\f1\u305?\f0 flar\f1\u305?\f0 n\f1\u305?\f0  olu\f1\'ba\f0 turan (Product, Category vb.) gibi nesne tiplerinin bu Generic yap\f1\u305?\f0 y\f1\u305?\f0  kullanabilmesini istiyoruz. \f2\lang1033\par
\'d6\f0\lang1055 zet olarak, yazd\f1\u305?\u287?\u305?\f0 m\f1\u305?\f0 z bu Generic yap\f1\u305?\f0 daki T tipini s\f1\u305?\f0 n\f1\u305?\f0 rland\f1\u305?\f0 raca\f1\u287?\u305?\f0 z.\par
O halde \cf1 Generic Constraint \cf0 uygulamam\f1\u305?\f0 z gerekiyor. Bunun anlam\f1\u305?\f0  \cf1 Generic K\f1\u305?\f0 s\f1\u305?\f0 t \cf0 demektir. Generic tipi k\f1\u305?\f0 s\f1\u305?\f0 tlayaca\f1\u287?\u305?\f0 z.\cf2\par
\cf3 public interface \cf4 IEntityRepository\cf0 <\cf7 T\cf0 > \cf3 where \cf7 T\cf0  : \cf3 class\cf0\par
\{\par
\}\par
T'yi k\f1\u305?\f0 s\f1\u305?\f0 tlayabilmek i\f2\lang1033\'e7\f0\lang1055 in \cf1 where T : \cf0 yap\f1\u305?\f0 s\f1\u305?\f0 n\f1\u305?\f0  kulland\f1\u305?\f0 k.\par
\f1\u304?\f0 ki noktadan sonra yaza\f1\u287?\u305?\f0 m\f1\u305?\f0 z her keyword, bir k\f1\u305?\f0 s\f1\u305?\f0 t olu\f1\'ba\f0 turacakt\f1\u305?\f0 r.\par
\f1\u304?\f0 lk olarak \cf1 class\cf0  keyword'\f2\lang1033\'fc\f0\lang1055 n\f2\lang1033\'fc\f0\lang1055  yazd\f1\u305?\f0 k. \par
Class yazd\f1\u305?\u287?\u305?\f0 m\f1\u305?\f0 zda, "\cf1 T ancak bir referans tip olabilir\cf0 " anlam\f1\u305?\f0 na gelir. Yaln\f1\u305?\f0 zca class olabilir demek de\f1\u287?\f0 ildir. Herhangi bir referans tip olabilir demektir. Bunu kar\f1\u305?\'ba\f0 t\f1\u305?\f0 rmamak gerekir.\cf2\par
\cf0 Bu sayede T yerine; int, double gibi de\f1\u287?\f0 er tipler yaz\f1\u305?\f0 lamayacak. Ancak k\f1\u305?\f0 s\f1\u305?\f0 tlamam\f1\u305?\f0 z hen\f2\lang1033\'fc\f0\lang1055 z bitmedi. Hala alakas\f1\u305?\f0 z referans tipler, bu generic tipi kullanabiliyor. K\f1\u305?\f0 s\f1\u305?\f0 t eklemeye devam edelim.\par
\cf3 public interface \cf4 IEntityRepository\cf0 <\cf7 T\cf0 > \cf3 where \cf7 T\cf0  : \cf3 class, \cf4 IEntity\cf0\par
\{\par
\}\par
IEntity yazd\f1\u305?\u287?\u305?\f0 m\f1\u305?\f0 zda ise T, ya IEntity olabilir ya da IEntity'den implemente olan bir \f1\'ba\f0 ey olabilir demektir.\par
Fakat son olarak 1 a\f2\lang1033\'e7\f1\lang1055\u305?\u287?\u305?\f0 m\f1\u305?\f0 z daha kald\f1\u305?\f0 . IEntity interface'inin kendisi de T yerine kullan\f1\u305?\f0 labilir. Ancak biz bunu da istemiyoruz. Biz yaln\f1\u305?\f0 zca IEntity'den implemente olan veritaban\f1\u305?\f0  varl\f1\u305?\f0 k nesnelerimizin T yerine kullan\f1\u305?\f0 labilir olmas\f1\u305?\f0 n\f1\u305?\f0  istiyoruz. Bunun i\f2\lang1033\'e7\f0\lang1055 in son bir k\f1\u305?\f0 s\f1\u305?\f0 t daha eklememiz gerekiyor.\cf2\par
\cf3 public interface \cf4 IEntityRepository\cf0 <\cf7 T\cf0 > \cf3 where \cf7 T\cf0  : \cf3 class\cf0 , \cf4 IEntity\cf0 , \cf3 new\cf0 ()\par
\{\par
\}\par
Son olarak new keyword ekledik. Bunun anlam\f1\u305?\f0  da yaln\f1\u305?\f0 zca newlenebilir olan "somut nesneler" T olarak kullan\f1\u305?\f0 labilir demektir. Bu sayede soyut bir yap\f1\u305?\f0  olan IEntity interface'ini devre d\f1\u305?\'ba\u305?\f0  b\f1\u305?\f0 rakm\f1\u305?\'ba\f0  olduk.\par
\f1\'aa\f0 imdilik projemizdeki soyutla\f1\'ba\f0 t\f1\u305?\f0 rma i\f1\'ba\f0 lemlerini bitirdik. \par
Hen\f2\lang1033\'fc\f0\lang1055 z tamamlanmad\f1\u305?\f0  ancak di\f1\u287?\f0 er videolarda soyutla\f1\'ba\f0 t\f1\u305?\f0 rma uygulamaya devam edece\f1\u287?\f0 iz. \f2\lang1033\'d6\f0\lang1055 rne\f1\u287?\f0 in Business katman\f1\u305?\f0 nda soyutla\f1\'ba\f0 t\f1\u305?\f0 rma yapmad\f1\u305?\f0 k \f1\'ba\f0 u ana kadar.\cf2\par
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \par
\cf0\b Dakika 1:16:00\cf2\b0\par
\cf0\f1\'aa\f0 imdilik soyutla\f1\'ba\f0 t\f1\u305?\f0 rmaya ara veriyoruz ve projemize EntityFramework dahil etmeyi \f2\lang1033\'f6\f1\lang1055\u287?\f0 renece\f1\u287?\f0 iz.\cf2\par
\cf0 Data Access katman\f1\u305?\f0 na EntityFramework klas\f2\lang1033\'f6\f0\lang1055 r\f2\lang1033\'fc\f0\lang1055  ekliyoruz.\par
Ve klas\f2\lang1033\'f6\f0\lang1055 r alt\f1\u305?\f0 na; EfProductDal, EfCategoryDal gibi gerekli s\f1\u305?\f0 n\f1\u305?\f0 flar\f1\u305?\f0  ekliyoruz. IProductDal interface'i implemente ediyoruz. Gerekli metotlar s\f1\u305?\f0 n\f1\u305?\f0 fa geliyor.\par
\cf1 EntityFramework\cf0 ; Microsoft'un bir \f2\lang1033\'fc\f0\lang1055 r\f2\lang1033\'fc\f0\lang1055 n\f2\lang1033\'fc\f0\lang1055 d\f2\lang1033\'fc\f0\lang1055 r.\par
\cf1 ORM (Object Reliatonal Mapping) \cf0 sa\f1\u287?\f0 layan bir \f2\lang1033\'fc\f0\lang1055 r\f2\lang1033\'fc\f0\lang1055 nd\f2\lang1033\'fc\f0\lang1055 r.\par
Ayn\f1\u305?\f0  zamanda \cf1 LINQ\cf0  destekli \f2\lang1033\'e7\f0\lang1055 al\f1\u305?\'ba\f0 maktad\f1\u305?\f0 r.\par
\cf1 ORM\cf0 : Veritaban\f1\u305?\f0  tablolar\f1\u305?\f0 n\f1\u305?\f0 , projedeki class'lar ile ili\f1\'ba\f0 kilendirmemizi sa\f1\u287?\f0 lar. Bu sayede SQL ile yap\f1\u305?\f0 labilen t\f2\lang1033\'fc\f0\lang1055 m operasyonlar\f1\u305?\f0  LINQ ile yapabilmemizi sa\f1\u287?\f0 lar.\cf2\par
\cf0 EntityFramework, \cf1 NuGet\cf0 'te yer alan bir pakettir.\par
Bu y\f2\lang1033\'fc\f0\lang1055 zden Data Access katman\f1\u305?\f0 na, EntityFramework paketini dahil etmek i\f2\lang1033\'e7\f0\lang1055 in \cf1 NuGet Package Manager\cf0 '\f1\u305?\f0  a\f2\lang1033\'e7\f1\lang1055\u305?\f0 yoruz.\par
\cf1 Microsoft.EntityFrameworkCore.SqlServer \cf0 paketini se\f2\lang1033\'e7\f0\lang1055 ip, indiriyoruz. Se\f2\lang1033\'e7\f0\lang1055 ti\f1\u287?\f0 imiz versiyon s\f2\lang1033\'fc\f0\lang1055 r\f2\lang1033\'fc\f0\lang1055 m\f2\lang1033\'fc\f0\lang1055 ne dikkat etmemiz gerekiyor. O anki dotnet versiyonumuza g\f2\lang1033\'f6\f0\lang1055 re se\f2\lang1033\'e7\f0\lang1055 memiz gerekiyor.\par
\f1\u304?\f0 ndirme i\f1\'ba\f0 lemi tamamland\f1\u305?\u287?\u305?\f0 nda, DataAccess katman\f1\u305?\f0 nda Dependencies se\f2\lang1033\'e7\f0\lang1055 ene\f1\u287?\f0 i alt\f1\u305?\f0 nda Packages alt\f1\u305?\f0 nda paketin eklendi\f1\u287?\f0 ini g\f2\lang1033\'f6\f0\lang1055 rebiliriz.\par
Art\f1\u305?\f0 k Data Access i\f2\lang1033\'e7\f0\lang1055 inde EntityFramework kodlar\f1\u305?\f0  yazabilir.\par
\cf2 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \par
\cf0\b Dakika 1:28:25\b0\par
\f1\'aa\f0 u an projemizdeki Product s\f1\u305?\f0 n\f1\u305?\f0 f\f1\u305?\f0 n\f1\u305?\f0 , veritaban\f1\u305?\f0 ndaki Products tablosuyla ili\f1\'ba\f0 kilendirece\f1\u287?\f0 iz. Bunu EntityFramework ile yapaca\f1\u287?\u305?\f0 z.\par
Yaln\f1\u305?\f0 zca Product s\f1\u305?\f0 n\f1\u305?\f0 f\f1\u305?\f0 n\f1\u305?\f0  de\f1\u287?\f0 il, sahip oldu\f1\u287?\f0 umuz t\f2\lang1033\'fc\f0\lang1055 m varl\f1\u305?\f0 k s\f1\u305?\f0 n\f1\u305?\f0 flar\f1\u305?\f0 n\f1\u305?\f0  tablolar ile ili\f1\'ba\f0 kilendirece\f1\u287?\f0 iz.\par
\cf1\f1\u304?\'ba\f0 te bu ili\f1\'ba\f0 kilendirmeleri yapabilmek i\f2\lang1033\'e7\f0\lang1055 in Context denilen yap\f1\u305?\f0 y\f1\u305?\f0  kurmam\f1\u305?\f0 z gerekiyor.\cf2\par
\cf1 Context\cf0 : Veritaban\f1\u305?\f0  tablolar\f1\u305?\f0  ile proje class'lar\f1\u305?\f0 m\f1\u305?\f0 z\f1\u305?\f0  ili\f1\'ba\f0 kilendirdi\f1\u287?\f0 imiz yeni bir class olacak.\par
Yeni bir class ekliyoruz. \f1\u304?\f0 smini \cf1 NorthwindContext \cf0 olarak veriyoruz.\cf2\par
\cf3 public class \cf5 NorthwindContext \cf0 :\cf5  DbContext\cf0\par
\{\par
\}\par
Kurdu\f1\u287?\f0 umuz EntityFramework paketinden gelen \cf1 DbContext \cf0 ad\f1\u305?\f0 nda bir base s\f1\u305?\f0 n\f1\u305?\f0 f var. Bu base s\f1\u305?\f0 n\f1\u305?\f0 f\f1\u305?\f0 , kendi Context s\f1\u305?\f0 n\f1\u305?\f0 f\f1\u305?\f0 m\f1\u305?\f0 za dahil ediyoruz.\cf2\par
\cf0 Bizim amac\f1\u305?\f0 m\f1\u305?\f0 z veritaban\f1\u305?\f0  \f2\lang1033\'fc\f0\lang1055 zerinden \f2\lang1033\'e7\f0\lang1055 al\f1\u305?\'ba\f0 mak, ve pratik olarak s\f1\u305?\f0 n\f1\u305?\f0 flar\f1\u305?\f0 m\f1\u305?\f0 z\f1\u305?\f0  bu veritaban\f1\u305?\f0 n\f1\u305?\f0 n tablolar\f1\u305?\f0 yla ili\f1\'ba\f0 kilendirece\f1\u287?\f0 iz. O halde \f2\lang1033\'f6\f0\lang1055 nce hangi veritaban\f1\u305?\f0 yla ili\f1\'ba\f0 kilendirece\f1\u287?\f0 imizi belirtmemiz gerekiyor.\par
(Daha \f2\lang1033\'f6\f0\lang1055 nce SQL \f2\lang1033\'e7\f0\lang1055 al\f1\u305?\'ba\f0 mak i\f2\lang1033\'e7\f0\lang1055 in local'e Northwind veritaban\f1\u305?\f0 n\f1\u305?\f0  dahil etmi\f1\'ba\f0 tik. Mevcut projemizi de Northwind veritaban\f1\u305?\f0 ndaki tablolar ile ili\f1\'ba\f0 kilendirece\f1\u287?\f0 iz. Bu sebepten dolay\f1\u305?\f0  Northwind veritaban\f1\u305?\f0 n\f1\u305?\f0 n local'imizde mevcut olmas\f1\u305?\f0  gerekiyor. E\f1\u287?\f0 er yoksa, haz\f1\u305?\f0 r kodlar\f1\u305?\f0  kullanarak \f1\'ba\f0 imdi olu\f1\'ba\f0 turun.)\cf2\par
\cf0 Her \f1\'ba\f0 ey haz\f1\u305?\f0 r olduktan sonra, Context s\f1\u305?\f0 n\f1\u305?\f0 f\f1\u305?\f0 m\f1\u305?\f0 z\f1\u305?\f0 n i\f2\lang1033\'e7\f0\lang1055 inde ba\f1\u287?\f0 lanmak istedi\f1\u287?\f0 imiz veritaban\f1\u305?\f0 n\f1\u305?\f0  belirtmemiz gerekiyor.\cf2\par
\cf3 public class \cf5 NorthwindContext \cf0 :\cf5  DbContext\cf0\par
\{\par
\tab\cf3 protected override\cf0\par
\tab\cf3 void \cf4 OnConfiguring\cf0 (\cf5 DbContextOptionsBuilder \cf6 optionsBuilder\cf0 )\par
\tab\{\par
\tab\tab optionsBuilder.UseSqlServer(\cf1 @"Server=(localdb)\\MSSQLLocalDB;\tab\tab\tab\tab\tab             Database=Northwind;                          \tab\tab\tab\tab\tab\tab  Trusted_Connection=true"\cf0 );\par
\tab\}\par
\}\par
Base s\f1\u305?\f0 n\f1\u305?\f0 ftan gelen \cf1 OnConfiguring \cf0 metodu sayesinde veritaban\f1\u305?\f0  ba\f1\u287?\f0 lant\f1\u305?\f0  bilgilerimizi bu metodun i\f2\lang1033\'e7\f0\lang1055 ine yazabiliriz.\par
optionsBuilder nesnesi sayesinde \cf1 UseSqlServer \cf0 metodunu \f2\lang1033\'e7\f0\lang1055 a\f1\u287?\u305?\f0 r\f1\u305?\f0 yoruz. Sql Server kulland\f1\u305?\u287?\u305?\f0 m\f1\u305?\f0 z i\f2\lang1033\'e7\f0\lang1055 in bu metot i\f1\'ba\f0 imizi \f2\lang1033\'e7\'f6\f0\lang1055 z\f2\lang1033\'fc\f0\lang1055 yor. \par
Metodun i\f2\lang1033\'e7\f0\lang1055 ine ise ba\f1\u287?\f0 lant\f1\u305?\f0  bilgilerimizi tek bir string i\f2\lang1033\'e7\f0\lang1055 inde veriyoruz.\par
(Connection String'i yazarken b\f2\lang1033\'fc\f0\lang1055 y\f2\lang1033\'fc\f0\lang1055 k k\f2\lang1033\'fc\'e7\'fc\f0\lang1055 k harf duyarl\f1\u305?\f0 l\f1\u305?\u287?\u305?\f0  yoktur.)\par
\f1\'aa\f0 imdi veritaban\f1\u305?\f0  ba\f1\u287?\f0 lant\f1\u305?\f0 m\f1\u305?\f0 z\f1\u305?\f0  kurmu\f1\'ba\f0  olduk. \par
Art\f1\u305?\f0 k hangi s\f1\u305?\f0 n\f1\u305?\f0 flar\f1\u305?\f0 m\f1\u305?\f0 z ile hangi veritaban\f1\u305?\f0  tablolar\f1\u305?\f0 n\f1\u305?\f0  ili\f1\'ba\f0 kilendirmek istedi\f1\u287?\f0 imizi belirtmemiz gerekiyor. Bunun i\f2\lang1033\'e7\f0\lang1055 in Context s\f1\u305?\f0 n\f1\u305?\f0 f\f1\u305?\f0 m\f1\u305?\f0 za kod yazmaya devam ediyoruz.\par
\cf3 public class \cf5 NorthwindContext \cf0 :\cf5  DbContext\cf0\par
\{\par
\tab\cf3 protected override\cf0\par
\tab\cf3 void \cf4 OnConfiguring\cf0 (\cf5 DbContextOptionsBuilder \cf6 optionsBuilder\cf0 )\par
\tab\{\par
\tab\tab optionsBuilder.UseSqlServer(\cf1 @"Server=(localdb)\\MSSQLLocalDB;\tab\tab\tab\tab\tab             Database=Northwind;                          \tab\tab\tab\tab\tab\tab  Trusted_Connection=true"\cf0 );\par
\tab\}\par
\tab\cf3 public \cf5 DbSet\cf0 <\cf5 Product\cf0 > Products \{ \cf3 get\cf0 ; \cf3 set\cf0 ; \}\par
\tab\cf3 public \cf5 DbSet\cf0 <\cf5 Category\cf0 > Categories \{ \cf3 get\cf0 ; \cf3 set\cf0 ; \}\par

\pard\li720\sa200\sl276\slmult1\qj\cf3 public \cf5 DbSet\cf0 <\cf5 Customer\cf0 > Customers \{ \cf3 get\cf0 ; \cf3 set\cf0 ; \}\par

\pard\sa200\sl276\slmult1\qj\}\par
\cf1 Yazd\f1\u305?\u287?\u305?\f0 m\f1\u305?\f0 z bu property'ler sayesinde, veritaban\f1\u305?\f0 ndaki Products isimli tabloyla, proejmizdeki Product s\f1\u305?\f0 n\f1\u305?\f0 f\f1\u305?\f0 n\f1\u305?\f0  ili\f1\'ba\f0 kilendirmi\f1\'ba\f0  olduk.\cf0\par
(Bu teknik sonra daha profesyonel \f1\'ba\f0 ekilde yaz\f1\u305?\f0 lacakt\f1\u305?\f0 r. \f1\'aa\f0 imdilik b\f2\lang1033\'f6\f0\lang1055 yle b\f1\u305?\f0 rak\f1\u305?\f0 yoruz.)\par
(S\f1\u305?\f0 n\f1\u305?\f0 f ad\f1\u305?\f0 m Product ve veritaban\f1\u305?\f0 ndaki tablo ad\f1\u305?\f0 m Products oldu\f1\u287?\f0 u i\f2\lang1033\'e7\f0\lang1055 in EntityFramework bu 2'sini isimlerinden dolay\f1\u305?\f0  ili\f1\'ba\f0 kilendirir. E\f1\u287?\f0 er benim s\f1\u305?\f0 n\f1\u305?\f0 f ad\f1\u305?\f0 mla tablo ad\f1\u305?\f0 m farkl\f1\u305?\f0  olsayd\f1\u305?\f0 , o halde ili\f1\'ba\f0 kiyi kurabilmek i\f2\lang1033\'e7\f0\lang1055 in farkl\f1\u305?\f0  kodlar yazmam gerekecekti. \f2\lang1033\'c7\'fc\f0\lang1055 nk\f2\lang1033\'fc\f0\lang1055  isimler ayn\f1\u305?\f0  de\f1\u287?\f0 ilse, EntityFramework hangi s\f1\u305?\f0 n\f1\u305?\f0 f\f1\u305?\f0  hangi tablo ile ba\f1\u287?\f0 layaca\f1\u287?\u305?\f0 n\f1\u305?\f0  bilemez.)\par
\cf2 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \cf0\par
\b Dakika 1:45:58\b0\par
\f1\'aa\f0 imdi EfProductDal i\f2\lang1033\'e7\f0\lang1055 erisinde, yine EntityFramework kullanarak CRUD operasyonlar\f1\u305?\f0 n\f1\u305?\f0  yazaca\f1\u287?\u305?\f0 z.\par
(Buradaki kodlar, ileride daha profesyonel hale getirilecektir. \f1\'aa\f0 imdilik bu haliyle yazaca\f1\u287?\u305?\f0 z.)\par
\cf3 public class \cf5 EfProductDal \cf0 : \cf4 IProductDal\cf0\par
\{\par
\tab\cf3 public void \cf0 Add(\cf5 Product \cf6 entity\cf0 )\par

\pard\li720\sa200\sl276\slmult1\qj\{\par
        \cf3 using\cf0 (\cf5 NorthwindContext \cf0 context = \cf3 new \cf5 NorthwindContext\cf0 ())\par
        \{\par
\tab    \cf3 var \cf6 addedEntity \cf0 = \cf6 context\cf0 .\cf4 Entry\cf0 (\cf6 entity\cf0 );\par
\tab    \cf6 addedEntity\cf0 .State = \cf4 EntityState\cf0 .Added;\par
\tab    \cf6 context\cf0 .\cf4 SaveChanges\cf0 ();\par
        \}\par

\pard\sa200\sl276\slmult1\qj\tab\}\par
 \}\par
(Buradaki \cf1 using \cf0 kullan\f1\u305?\f0 m\f1\u305?\f0  \f2\lang1033\'f6\f0\lang1055 zel bir ama\f2\lang1033\'e7\f0\lang1055  bar\f1\u305?\f0 nd\f1\u305?\f0 rmaktad\f1\u305?\f0 r. Memory'nin performansl\f1\u305?\f0  \f2\lang1033\'e7\f0\lang1055 al\f1\u305?\'ba\f0 mas\f1\u305?\f0  i\f2\lang1033\'e7\f0\lang1055 in Garbage Collector'\f1\u305?\f0  performansl\f1\u305?\f0  \f2\lang1033\'e7\f0\lang1055 al\f1\u305?\'ba\f0 t\f1\u305?\f0 rmaya yarar. Belle\f1\u287?\f0 i h\f1\u305?\f0 zl\f1\u305?\f0 ca temizlemek i\f2\lang1033\'e7\f0\lang1055 in kullan\f1\u305?\f0 yoruz. Bu konu daha ayr\f1\u305?\f0 nt\f1\u305?\f0 l\f1\u305?\f0  incelemek i\f2\lang1033\'e7\f0\lang1055 in \cf1 IDisposable Pattern Implementation of C# \cf0 konusu ara\f1\'ba\f0 t\f1\u305?\f0 r\f1\u305?\f0 labilir.)\par
\par
\cf3 var \cf6 addedEntity \cf0 = \cf6 context\cf0 .\cf4 Entry\cf0 (\cf6 entity\cf0 );\par
Yukar\f1\u305?\f0 daki sat\f1\u305?\f0 r ile, projedeki entity'yi veritaban\f1\u305?\f0  ile ili\f1\'ba\f0 kilendirdik.\par
\par
\cf6 addedEntity\cf0 .State = \cf4 EntityState\cf0 .Added;\par
\f1\u304?\f0 li\f1\'ba\f0 kisini kurdu\f1\u287?\f0 umuz nesnenin, durumunu (state'ini) Added olarak belirttik. Bu sayede bu nesnenin, veritaban\f1\u305?\f0 na "eklenecek" bir veri oldu\f1\u287?\f0 unu belirtmi\f1\'ba\f0  olduk.\par
\par
\cf6 context\cf0 .\cf4 SaveChanges\cf0 ();\par
Bu kod ile de i\f1\'ba\f0 lerimizi bitirdi\f1\u287?\f0 imizi belirterek, "de\f1\u287?\f0 i\f1\'ba\f0 iklikleri kaydet" komutu vermi\f1\'ba\f0  oluyoruz. \par
\par
Geri kalan Update ve Delete metotlar\f1\u305?\f0 n\f1\u305?\f0  da benzer \f1\'ba\f0 ekilde yaz\f1\u305?\f0 yoruz.\par
Update => \cf1 EntityState.Modified\cf0\par
Delete => \cf1 EntityState.Deleted\cf0\par
State durumlar\f1\u305?\f0 n\f1\u305?\f0  da yukar\f1\u305?\f0 daki gibi yaz\f1\u305?\f0 yoruz.\par
\par
(\f1\'aa\f0 imdilik kodlar\f1\u305?\f0  bu \f1\'ba\f0 ekilde yaz\f1\u305?\f0 yoruz ancak g\f2\lang1033\'f6\f0\lang1055 r\f2\lang1033\'fc\f0\lang1055 ld\f2\lang1033\'fc\f1\lang1055\u287?\f2\lang1033\'fc\f0\lang1055  \f2\lang1033\'fc\f0\lang1055 zere Product i\f2\lang1033\'e7\f0\lang1055 in, Category ve Customer i\f2\lang1033\'e7\f0\lang1055 in hep ayn\f1\u305?\f0  Add, Update, Delete metotlar\f1\u305?\f0  yazd\f1\u305?\f0 k. \f1\u304?\f0 lerleyen derslerde bu kod tekrar\f1\u305?\f0 n\f1\u305?\f0  engelleyece\f1\u287?\f0 iz ve daha profesyonel \f1\'ba\f0 ekilde kodlar\f1\u305?\f0 m\f1\u305?\f0 z\f1\u305?\f0  refactor edece\f1\u287?\f0 iz. \par
\f1\u304?\f0 lerde Base EntityFramework Repository'leri de olu\f1\'ba\f0 turaca\f1\u287?\u305?\f0 z. Ve daha ileri soyutlama teknikleri kullanaca\f1\u287?\u305?\f0 z.)\par
\cf2 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \par
\cf0\b Dakika 2:10:10\b0\par
\f1\'aa\f0 imdi Get ve GetAll metotlar\f1\u305?\f0 n\f1\u305?\f0  yazaca\f1\u287?\u305?\f0 z.\par
\cf1 //A\f2\lang1033\'e7\f1\lang1055\u305?\f0 klamalar buraya eklenecek.\cf0\par
\cf2 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \par
\cf0\b Dakika 2:27:30\b0\par
Business katman\f1\u305?\f0 na istedi\f1\u287?\f0 imiz metotlar\f1\u305?\f0  ekleyece\f1\u287?\f0 iz.\par
GetAllByCategoryId( int id );\par
GetAllByUnitPrice( decimal min, decimal max );\line\par
\cf1 //A\f2\lang1033\'e7\f1\lang1055\u305?\f0 klamalar buraya eklenecek.\cf0\par
\cf2 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \cf0\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\f2\lang31\par
}
 